{
  "address": "0x47daE646612818D190E745Faef8b72C278AAb4f6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ibAgreement",
          "type": "address"
        }
      ],
      "name": "IBAgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_closeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralCap",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAgreements",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ibAgreements",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbdc8a2424a4d690af8091172af1515e097d1969ab76587601444c2f90e0537a1",
  "receipt": {
    "to": null,
    "from": "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "contractAddress": "0x47daE646612818D190E745Faef8b72C278AAb4f6",
    "transactionIndex": 0,
    "gasUsed": "3395005",
    "logsBloom": "0x
    "blockHash": "0xa9508d7a290c9e8365c148b5fe24abc5db665523b59fa4753385deb60d2fd750",
    "transactionHash": "0xbdc8a2424a4d690af8091172af1515e097d1969ab76587601444c2f90e0537a1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15823739,
        "transactionHash": "0xbdc8a2424a4d690af8091172af1515e097d1969ab76587601444c2f90e0537a1",
        "address": "0x47daE646612818D190E745Faef8b72C278AAb4f6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ba608d6a354fbeb41fd7cc799e7f09b2612ab26"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa9508d7a290c9e8365c148b5fe24abc5db665523b59fa4753385deb60d2fd750"
      }
    ],
    "blockNumber": 15823739,
    "cumulativeGasUsed": "3395005",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE0B57FEEd45e7D908f2d0DaCd26F113Cf26715BF"
  ],
  "numDeployments": 2,
  "solcInputHash": "ce9a4384708a4d9f5ece57144f5297f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ibAgreement\",\"type\":\"address\"}],\"name\":\"IBAgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralCap\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAgreements\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ibAgreements\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IBAgreementFactory.sol\":\"IBAgreementFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IBAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IComptroller.sol\\\";\\nimport \\\"./interfaces/IConverter.sol\\\";\\nimport \\\"./interfaces/IIToken.sol\\\";\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\n\\ncontract IBAgreementV3 is ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable executor;\\n    address public immutable borrower;\\n    address public immutable governor;\\n    IComptroller public immutable comptroller;\\n    IERC20 public immutable collateral;\\n    uint256 public immutable collateralFactor;\\n    uint256 public immutable liquidationFactor;\\n    uint256 public immutable closeFactor;\\n    uint256 public collateralCap;\\n    IPriceFeed public priceFeed;\\n    mapping(IIToken => IConverter) public converters;\\n\\n    modifier onlyBorrower() {\\n        require(msg.sender == borrower, \\\"caller is not the borrower\\\");\\n        _;\\n    }\\n\\n    modifier onlyExecutor() {\\n        require(msg.sender == executor, \\\"caller is not the executor\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, \\\"caller is not the governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the values for {executor}, {borrower}, {governor}, {comptroller}, {collateral}, {priceFeed}, {collateralFactor}, {liquidationFactor}, {closeFactor}, and {collateralCap}.\\n     *\\n     * {collateral} must be a vanilla ERC20 token.\\n     *\\n     * All of these values except {priceFeed} and {collateralCap} are immutable: they can only be set once during construction.\\n     */\\n    constructor(\\n        address _executor,\\n        address _borrower,\\n        address _governor,\\n        address _comptroller,\\n        address _collateral,\\n        address _priceFeed,\\n        uint256 _collateralFactor,\\n        uint256 _liquidationFactor,\\n        uint256 _closeFactor,\\n        uint256 _collateralCap\\n    ) {\\n        executor = _executor;\\n        borrower = _borrower;\\n        governor = _governor;\\n        comptroller = IComptroller(_comptroller);\\n        collateral = IERC20(_collateral);\\n        priceFeed = IPriceFeed(_priceFeed);\\n        collateralFactor = _collateralFactor;\\n        liquidationFactor = _liquidationFactor;\\n        closeFactor = _closeFactor;\\n        collateralCap = _collateralCap;\\n\\n        require(_collateral == priceFeed.getToken(), \\\"mismatch price feed\\\");\\n        require(\\n            _collateralFactor > 0 && _collateralFactor <= 1e18,\\n            \\\"invalid collateral factor\\\"\\n        );\\n        require(\\n            _liquidationFactor >= _collateralFactor &&\\n                _liquidationFactor <= 1e18,\\n            \\\"invalid liquidation factor\\\"\\n        );\\n        require(\\n            _closeFactor > 0 && _closeFactor <= 1e18,\\n            \\\"invalid close factor\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the current debt in USD value of this contract\\n     * @return The borrow balance in USD value\\n     */\\n    function debtUSD() external view returns (uint256) {\\n        return getHypotheticalDebtValue(address(0), 0);\\n    }\\n\\n    /**\\n     * @notice Get the hypothetical debt in USD value of this contract after borrow\\n     * @param market The market\\n     * @param borrowAmount The hypothetical borrow amount\\n     * @return The hypothetical debt in USD value\\n     */\\n    function hypotheticalDebtUSD(IIToken market, uint256 borrowAmount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return getHypotheticalDebtValue(address(market), borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Get the max value in USD to use for borrow in this contract\\n     * @return The USD value\\n     */\\n    function collateralUSD() external view returns (uint256) {\\n        uint256 value = getHypotheticalCollateralValue(0);\\n        return (value * collateralFactor) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Get the hypothetical max value in USD to use for borrow in this contract after withdraw\\n     * @param withdrawAmount The hypothetical withdraw amount\\n     * @return The hypothetical USD value\\n     */\\n    function hypotheticalCollateralUSD(uint256 withdrawAmount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 value = getHypotheticalCollateralValue(withdrawAmount);\\n        return (value * collateralFactor) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Get the lquidation threshold. It represents the max value of collateral that we recongized.\\n     * @dev If the debt is greater than the liquidation threshold, this agreement is liquidatable.\\n     * @return The lquidation threshold\\n     */\\n    function liquidationThreshold() external view returns (uint256) {\\n        uint256 value = getHypotheticalCollateralValue(0);\\n        return (value * liquidationFactor) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Borrow from market if the collateral is sufficient\\n     * @param market The market\\n     * @param amount The borrow amount\\n     */\\n    function borrow(IIToken market, uint256 amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        onlyBorrower\\n    {\\n        borrowInternal(market, amount);\\n    }\\n\\n    /**\\n     * @notice Borrow max from market with current price\\n     * @param market The market\\n     */\\n    function borrowMax(IIToken market)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        onlyBorrower\\n    {\\n        (, , uint256 borrowBalance, ) = market.getAccountSnapshot(\\n            address(this)\\n        );\\n\\n        IPriceOracle oracle = IPriceOracle(comptroller.oracle());\\n\\n        uint256 maxBorrowAmount = (this.collateralUSD() * 1e18) /\\n            oracle.getUnderlyingPrice(address(market));\\n        require(maxBorrowAmount > borrowBalance, \\\"undercollateralized\\\");\\n        borrowInternal(market, maxBorrowAmount - borrowBalance);\\n    }\\n\\n    /**\\n     * @notice Withdraw the collateral if sufficient\\n     * @param amount The withdraw amount\\n     */\\n    function withdraw(uint256 amount) external nonReentrant onlyBorrower {\\n        uint256 debt = this.debtUSD();\\n        if (debt != 0) {\\n            // If there is still debt, must be unpaused and undercollateralized to withdraw.\\n            _requireNotPaused();\\n            require(\\n                debt <= this.hypotheticalCollateralUSD(amount),\\n                \\\"undercollateralized\\\"\\n            );\\n        }\\n        collateral.safeTransfer(borrower, amount);\\n    }\\n\\n    /**\\n     * @notice Repay the debts\\n     * @param market The market\\n     * @param amount The repay amount\\n     */\\n    function repay(IIToken market, uint256 amount)\\n        external\\n        nonReentrant\\n        onlyBorrower\\n    {\\n        IERC20 underlying = IERC20(market.underlying());\\n        underlying.safeTransferFrom(msg.sender, address(this), amount);\\n        repayInternal(market, amount);\\n    }\\n\\n    /**\\n     * @notice Fully repay the debts\\n     * @param market The market\\n     */\\n    function repayFull(IIToken market) external nonReentrant onlyBorrower {\\n        // Get the current borrow balance including interests.\\n        uint256 borrowBalance = market.borrowBalanceCurrent(address(this));\\n\\n        IERC20 underlying = IERC20(market.underlying());\\n        underlying.safeTransferFrom(msg.sender, address(this), borrowBalance);\\n        repayInternal(market, borrowBalance);\\n    }\\n\\n    /**\\n     * @notice Seize the tokens\\n     * @param token The token\\n     * @param amount The amount\\n     */\\n    function seize(IERC20 token, uint256 amount) external onlyExecutor {\\n        require(\\n            address(token) != address(collateral),\\n            \\\"seize collateral not allow\\\"\\n        );\\n        token.safeTransfer(executor, amount);\\n    }\\n\\n    /**\\n     * @notice Liquidate with exact collateral amount for a given market\\n     * @param market The market\\n     * @param collateralAmount The collateral amount for liquidation\\n     * @param repayAmountMin The min repay amount after conversion\\n     */\\n    function liquidateWithExactCollateralAmount(\\n        IIToken market,\\n        uint256 collateralAmount,\\n        uint256 repayAmountMin\\n    ) external onlyExecutor {\\n        checkLiquidatable(market);\\n\\n        require(\\n            collateralAmount <=\\n                (getHypotheticalCollateralBalance(0) * closeFactor) / 1e18,\\n            \\\"liquidate too much\\\"\\n        );\\n\\n        // Approve and convert.\\n        IERC20(collateral).safeIncreaseAllowance(\\n            address(converters[market]),\\n            collateralAmount\\n        );\\n        uint256 amountOut = converters[market].convertExactTokensForTokens(\\n            collateralAmount,\\n            repayAmountMin\\n        );\\n\\n        // Repay the debts.\\n        repayInternal(market, amountOut);\\n    }\\n\\n    /**\\n     * @notice Liquidate for exact repay amount for a given market\\n     * @param market The market\\n     * @param repayAmount The desired repay amount\\n     * @param collateralAmountMax The max collateral amount for liquidation\\n     */\\n    function liquidateForExactRepayAmount(\\n        IIToken market,\\n        uint256 repayAmount,\\n        uint256 collateralAmountMax\\n    ) external onlyExecutor {\\n        checkLiquidatable(market);\\n\\n        uint256 amountIn = converters[market].getAmountIn(repayAmount);\\n        require(amountIn <= collateralAmountMax, \\\"too much collateral needed\\\");\\n\\n        require(\\n            amountIn <=\\n                (getHypotheticalCollateralBalance(0) * closeFactor) / 1e18,\\n            \\\"liquidate too much\\\"\\n        );\\n\\n        // Approve and convert.\\n        IERC20(collateral).safeIncreaseAllowance(\\n            address(converters[market]),\\n            amountIn\\n        );\\n        converters[market].convertTokensForExactTokens(\\n            repayAmount,\\n            collateralAmountMax\\n        );\\n\\n        // Repay the debts.\\n        repayInternal(market, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Set the converter for liquidation\\n     * @param _markets The markets\\n     * @param _converters The converters\\n     */\\n    function setConverter(\\n        IIToken[] calldata _markets,\\n        IConverter[] calldata _converters\\n    ) external onlyExecutor {\\n        require(_markets.length == _converters.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            require(address(_converters[i]) != address(0), \\\"empty converter\\\");\\n            require(\\n                _converters[i].source() == address(collateral),\\n                \\\"mismatch source token\\\"\\n            );\\n            require(\\n                _converters[i].destination() == _markets[i].underlying(),\\n                \\\"mismatch destination token\\\"\\n            );\\n            converters[_markets[i]] = IConverter(_converters[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Pause the IB Agreement\\n     */\\n    function pause() external onlyExecutor {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the IB Agreement\\n     */\\n    function unpause() external onlyExecutor {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Set the collateral cap\\n     * @param _collateralCap The new cap\\n     */\\n    function setCollateralCap(uint256 _collateralCap) external onlyGovernor {\\n        collateralCap = _collateralCap;\\n    }\\n\\n    /**\\n     * @notice Set the price feed of the collateral\\n     * @param _priceFeed The new price feed\\n     */\\n    function setPriceFeed(address _priceFeed) external onlyGovernor {\\n        require(\\n            address(collateral) == IPriceFeed(_priceFeed).getToken(),\\n            \\\"mismatch price feed\\\"\\n        );\\n\\n        priceFeed = IPriceFeed(_priceFeed);\\n    }\\n\\n    /* Internal functions */\\n\\n    /**\\n     * @notice Get the current collateral balance, min(balance, cap)\\n     * @param withdrawAmount The hypothetical withdraw amount\\n     * @return The collateral balance\\n     */\\n    function getHypotheticalCollateralBalance(uint256 withdrawAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 balance = collateral.balanceOf(address(this)) - withdrawAmount;\\n        if (collateralCap != 0 && collateralCap <= balance) {\\n            balance = collateralCap;\\n        }\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get the current debt of this contract\\n     * @param borrowMarket The hypothetical borrow market\\n     * @param borrowAmount The hypothetical borrow amount\\n     * @return The borrow balance\\n     */\\n    function getHypotheticalDebtValue(\\n        address borrowMarket,\\n        uint256 borrowAmount\\n    ) internal view returns (uint256) {\\n        uint256 debt;\\n        address[] memory borrowedAssets = comptroller.getAssetsIn(\\n            address(this)\\n        );\\n        IPriceOracle oracle = IPriceOracle(comptroller.oracle());\\n        for (uint256 i = 0; i < borrowedAssets.length; i++) {\\n            IIToken market = IIToken(borrowedAssets[i]);\\n            uint256 amount;\\n            (, , uint256 borrowBalance, ) = market.getAccountSnapshot(\\n                address(this)\\n            );\\n            if (address(market) == borrowMarket) {\\n                amount = borrowBalance + borrowAmount;\\n            } else {\\n                amount = borrowBalance;\\n            }\\n            debt +=\\n                (amount * oracle.getUnderlyingPrice(address(market))) /\\n                1e18;\\n        }\\n        return debt;\\n    }\\n\\n    /**\\n     * @notice Get the hypothetical collateral in USD value in this contract after withdraw\\n     * @param withdrawAmount The hypothetical withdraw amount\\n     * @return The hypothetical collateral in USD value\\n     */\\n    function getHypotheticalCollateralValue(uint256 withdrawAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 balance = getHypotheticalCollateralBalance(withdrawAmount);\\n        uint8 decimals = IERC20Metadata(address(collateral)).decimals();\\n        uint256 normalizedBalance = balance * 10**(18 - decimals);\\n        return (normalizedBalance * priceFeed.getPrice()) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Check if the market is liquidatable\\n     * @param market The market\\n     */\\n    function checkLiquidatable(IIToken market) internal view {\\n        IERC20 underlying = IERC20(market.underlying());\\n        require(\\n            this.debtUSD() > this.liquidationThreshold(),\\n            \\\"not liquidatable\\\"\\n        );\\n        require(address(converters[market]) != address(0), \\\"empty converter\\\");\\n        require(\\n            converters[market].source() == address(collateral),\\n            \\\"mismatch source token\\\"\\n        );\\n        require(\\n            converters[market].destination() == address(underlying),\\n            \\\"mismatch destination token\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Borrow from market\\n     * @param market The market\\n     * @param _amount The borrow amount\\n     */\\n    function borrowInternal(IIToken market, uint256 _amount) internal {\\n        require(\\n            getHypotheticalDebtValue(address(market), _amount) <=\\n                this.collateralUSD(),\\n            \\\"undercollateralized\\\"\\n        );\\n        require(market.borrow(_amount) == 0, \\\"borrow failed\\\");\\n        IERC20(market.underlying()).safeTransfer(borrower, _amount);\\n    }\\n\\n    /**\\n     * @notice Repay the debts\\n     * @param _amount The repay amount\\n     */\\n    function repayInternal(IIToken market, uint256 _amount) internal {\\n        IERC20(market.underlying()).safeIncreaseAllowance(\\n            address(market),\\n            _amount\\n        );\\n        require(market.repayBorrow(_amount) == 0, \\\"repay failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x71e734e5ff34530736ad04a90df75dfc41d95fcf49e817a85bf45650d8e983e0\",\"license\":\"MIT\"},\"contracts/IBAgreementFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IBAgreement.sol\\\";\\n\\ncontract IBAgreementFactory is Ownable {\\n    address public immutable comptroller;\\n    address[] public ibAgreements;\\n\\n    event IBAgreementCreated(address ibAgreement);\\n\\n    constructor(address _comptroller) {\\n        comptroller = _comptroller;\\n    }\\n\\n    function create(\\n        address _executor,\\n        address _borrower,\\n        address _governor,\\n        address _collateral,\\n        address _priceFeed,\\n        uint256 _collateralFactor,\\n        uint256 _liquidationFactor,\\n        uint256 _closeFactor,\\n        uint256 _collateralCap\\n    ) external onlyOwner returns (address) {\\n        IBAgreementV3 ibAgreement = new IBAgreementV3(\\n            _executor,\\n            _borrower,\\n            _governor,\\n            comptroller,\\n            _collateral,\\n            _priceFeed,\\n            _collateralFactor,\\n            _liquidationFactor,\\n            _closeFactor,\\n            _collateralCap\\n        );\\n        ibAgreements.push(address(ibAgreement));\\n        emit IBAgreementCreated(address(ibAgreement));\\n        return address(ibAgreement);\\n    }\\n\\n    function getAllAgreements() external view returns (address[] memory) {\\n        return ibAgreements;\\n    }\\n}\\n\",\"keccak256\":\"0xd848e78d6f98b039ad959e8a688dce665ab35eae78541bc0d975c2815f029bbb\",\"license\":\"MIT\"},\"contracts/interfaces/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IComptroller {\\n    function oracle() external view returns (address);\\n\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isMarketListed(address cTokenAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3f3d13a36fd2f11f02d85d07f82ec89df924146913d4b173c50463c4bce46d25\",\"license\":\"MIT\"},\"contracts/interfaces/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IConverter {\\n    function convertExactTokensForTokens(uint256 amountIn, uint256 amountOutMin)\\n        external\\n        returns (uint256);\\n\\n    function convertTokensForExactTokens(uint256 amountOut, uint256 amountInMax)\\n        external\\n        returns (uint256);\\n\\n    function getAmountOut(uint256 amountIn) external returns (uint256);\\n\\n    function getAmountIn(uint256 amountOut) external returns (uint256);\\n\\n    function source() external view returns (address);\\n\\n    function destination() external view returns (address);\\n}\\n\",\"keccak256\":\"0xefbdbec8b1995b6fe4fe752e5f889e670e53d9cfada5aae4d7e995337a775794\",\"license\":\"MIT\"},\"contracts/interfaces/IIToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IIToken {\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function comptroller() external view returns (address);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x76539f74463bf519e771474ac1329185a78ad639710a52db293195a9b076f2af\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFeed {\\n    function getToken() external view returns (address);\\n\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ccc79d885d046a93dad156b1c0ab0721894acb69e9cde9ee5628d1e8c0a13b4\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPriceOracle {\\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe65f738b48a328d7bd31aec4fb7bdeb599f68774315857d44013995e3b1e447e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051613d38380380613d3883398101604081905261002f9161009d565b6100383361004d565b60601b6001600160601b0319166080526100cb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ae578081fd5b81516001600160a01b03811681146100c4578182fd5b9392505050565b60805160601c613c496100ef6000396000818160e001526102080152613c496000f3fe60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063715018a61162000063578063715018a614620001025780638da5cb5b146200010e5780639f1aec601462000120578063f2fde38b14620001375762000088565b80634281e769146200008d5780634e6873c714620000c15780635fe3b56714620000da575b600080fd5b620000a46200009e36600462000556565b6200014e565b6040516001600160a01b0390911681526020015b60405180910390f35b620000cb62000179565b604051620000b891906200056f565b620000a47f000000000000000000000000000000000000000000000000000000000000000081565b6200010c620001dd565b005b6000546001600160a01b0316620000a4565b620000a462000131366004620004c2565b620001f5565b6200010c620001483660046200049e565b62000344565b600181815481106200015f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60606001805480602002602001604051908101604052809291908181526020018280548015620001d357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620001b4575b5050505050905090565b620001e7620003c7565b620001f3600062000423565b565b600062000201620003c7565b60008a8a8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b8b8b6040516200023b9062000473565b6001600160a01b039a8b168152988a1660208a0152968916604089015294881660608801529287166080870152951660a085015260c084019490945260e083019390935261010082019290925261012081019190915261014001604051809103906000f080158015620002b2573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383169081179091556040519081529091507fbf1d3f7d480ac8371bfbfac85c84fdac76519ac5d83d3aa9ed57f6e1ca171fa69060200160405180910390a19a9950505050505050505050565b6200034e620003c7565b6001600160a01b038116620003b95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620003c48162000423565b50565b6000546001600160a01b03163314620001f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003b0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61365580620005bf83390190565b80356001600160a01b03811681146200049957600080fd5b919050565b600060208284031215620004b0578081fd5b620004bb8262000481565b9392505050565b60008060008060008060008060006101208a8c031215620004e1578485fd5b620004ec8a62000481565b9850620004fc60208b0162000481565b97506200050c60408b0162000481565b96506200051c60608b0162000481565b95506200052c60808b0162000481565b989b979a50959894979660a0860135965060c08601359560e0810135955061010001359350915050565b60006020828403121562000568578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015620005b25783516001600160a01b0316835292840192918401916001016200058b565b5090969550505050505056fe6101806040523480156200001257600080fd5b506040516200365538038062003655833981016040819052620000359162000314565b60016000819055805460ff191690556001600160601b031960608b811b82166080528a811b821660a05289811b821660c05288811b821660e05287901b1661010052600380546001600160a01b038781166001600160a01b031990921691909117918290556101208690526101408590526101608490526002839055604080516321df0da760e01b8152905192909116916321df0da791600480820192602092909190829003018186803b158015620000ed57600080fd5b505afa15801562000102573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001289190620002f0565b6001600160a01b0316866001600160a01b0316146200018e5760405162461bcd60e51b815260206004820152601360248201527f6d69736d6174636820707269636520666565640000000000000000000000000060448201526064015b60405180910390fd5b600084118015620001a75750670de0b6b3a76400008411155b620001f55760405162461bcd60e51b815260206004820152601960248201527f696e76616c696420636f6c6c61746572616c20666163746f7200000000000000604482015260640162000185565b8383101580156200020e5750670de0b6b3a76400008311155b6200025c5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206c69717569646174696f6e20666163746f72000000000000604482015260640162000185565b600082118015620002755750670de0b6b3a76400008211155b620002c35760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420636c6f736520666163746f72000000000000000000000000604482015260640162000185565b50505050505050505050620003be565b80516001600160a01b0381168114620002eb57600080fd5b919050565b60006020828403121562000302578081fd5b6200030d82620002d3565b9392505050565b6000806000806000806000806000806101408b8d03121562000334578586fd5b6200033f8b620002d3565b99506200034f60208c01620002d3565b98506200035f60408c01620002d3565b97506200036f60608c01620002d3565b96506200037f60808c01620002d3565b95506200038f60a08c01620002d3565b945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c61012051610140516101605161313b6200051a600039600081816101f901528181611084015261170c0152600081816102ab0152610ddd0152600081816104760152818161127a01526115a401526000818161044f0152818161076901528181610d1e01528181610f9b01528181611125015281816117ad0152818161193d01528181611c7b015281816124da01526126ae015260008181610334015281816113ad01528181611ff6015261207a01526000818161023301528181610eb201526118810152600081816103a7015281816104fa01528181610b1801528181610bc301528181610d4001528181610e4d015281816112ed0152611f310152600081816104040152818161065e01528181610d790152818161103301528181611207015281816115d4015281816118fe01526119cc015261313b6000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063741bef1a11610104578063c34c08e5116100a2578063d8dfeb4511610071578063d8dfeb451461044a578063df011c4114610471578063e6d1544014610498578063eb9253c0146104ab576101da565b8063c34c08e5146103ff578063d2bb18e914610426578063d62429ba1461042f578063d785d03914610437576101da565b80638456cb59116100de5780638456cb59146103c95780638696465e146103d157806388ba0a14146103d95780639bd5c7c5146103ec576101da565b8063741bef1a1461037c5780637b3e99041461038f5780637df1f1b9146103a2576101da565b80633f4ba83a1161017c5780635c975abb1161014b5780635c975abb146103195780635fe3b5671461032f5780636a0e22ac14610356578063724e78da14610369576101da565b80633f4ba83a146102cd5780634031234c146102d557806340a05acb146102dd5780634b8a352914610306576101da565b806315b09fee116101b857806315b09fee1461026d57806322867d78146102805780632e1a7d4d14610293578063352ade55146102a6576101da565b806304949679146101df57806305308b9f146101f45780630c340a241461022e575b600080fd5b6101f26101ed366004612b45565b6104be565b005b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610225565b6101f261027b366004612c43565b610653565b6101f261028e366004612ccc565b610ae5565b6101f26102a1366004612d2b565b610b90565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f2610d6e565b61021b610dc0565b6102556102eb366004612b45565b6004602052600090815260409020546001600160a01b031681565b6101f2610314366004612ccc565b610e12565b60015460ff166040519015158152602001610225565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b61021b610364366004612ccc565b610e94565b6101f2610377366004612b45565b610ea7565b600354610255906001600160a01b031681565b6101f261039d366004612cf7565b611028565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6101f26111fc565b61021b61124c565b61021b6103e7366004612d2b565b61125e565b6101f26103fa366004612b45565b6112b2565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b61021b60025481565b61021b611587565b6101f2610445366004612cf7565b6115c9565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f26104a6366004612d2b565b611876565b6101f26104b9366004612ccc565b6118f3565b600260005414156104ea5760405162461bcd60e51b81526004016104e190612e9b565b60405180910390fd5b6002600055336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105375760405162461bcd60e51b81526004016104e190612e00565b6040516305eff7ef60e21b81523060048201526000906001600160a01b038316906317bfdfbc90602401602060405180830381600087803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190612d43565b90506000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f057600080fd5b505afa158015610604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106289190612b61565b905061063f6001600160a01b0382163330856119f5565b6106498383611a60565b5050600160005550565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461069b5760405162461bcd60e51b81526004016104e190612e64565b8281146106dc5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60448201526064016104e1565b60005b83811015610ade57600083838381811061070957634e487b7160e01b600052603260045260246000fd5b905060200201602081019061071e9190612b45565b6001600160a01b031614156107675760405162461bcd60e51b815260206004820152600f60248201526e32b6b83a3c9031b7b73b32b93a32b960891b60448201526064016104e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168383838181106107b157634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107c69190612b45565b6001600160a01b03166367e828bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107fe57600080fd5b505afa158015610812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108369190612b61565b6001600160a01b0316146108845760405162461bcd60e51b815260206004820152601560248201527436b4b9b6b0ba31b41039b7bab931b2903a37b5b2b760591b60448201526064016104e1565b8484828181106108a457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108b99190612b45565b6001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190612b61565b6001600160a01b031683838381811061095257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109679190612b45565b6001600160a01b031663b269681d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099f57600080fd5b505afa1580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d79190612b61565b6001600160a01b031614610a2d5760405162461bcd60e51b815260206004820152601a60248201527f6d69736d617463682064657374696e6174696f6e20746f6b656e00000000000060448201526064016104e1565b828282818110610a4d57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a629190612b45565b60046000878785818110610a8657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a9b9190612b45565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905580610ad6816130a6565b9150506106df565b5050505050565b60026000541415610b085760405162461bcd60e51b81526004016104e190612e9b565b6002600055336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b555760405162461bcd60e51b81526004016104e190612e00565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f057600080fd5b60026000541415610bb35760405162461bcd60e51b81526004016104e190612e9b565b6002600055336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c005760405162461bcd60e51b81526004016104e190612e00565b6000306001600160a01b0316638696465e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3b57600080fd5b505afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190612d43565b90508015610d1157610c83611b9c565b60405163222e828560e21b81526004810183905230906388ba0a149060240160206040518083038186803b158015610cba57600080fd5b505afa158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf29190612d43565b811115610d115760405162461bcd60e51b81526004016104e190612e37565b610d656001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611be2565b50506001600055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610db65760405162461bcd60e51b81526004016104e190612e64565b610dbe611c17565b565b600080610dcd6000611c69565b9050670de0b6b3a7640000610e027f000000000000000000000000000000000000000000000000000000000000000083613021565b610e0c9190612eea565b91505090565b60026000541415610e355760405162461bcd60e51b81526004016104e190612e9b565b6002600055610e42611b9c565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e8a5760405162461bcd60e51b81526004016104e190612e00565b610d658282611ddc565b6000610ea08383611fd2565b9392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f1f5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f742074686520676f7665726e6f7200000000000060448201526064016104e1565b806001600160a01b03166321df0da76040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5857600080fd5b505afa158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f909190612b61565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146110065760405162461bcd60e51b81526020600482015260136024820152721b5a5cdb585d18da081c1c9a58d94819995959606a1b60448201526064016104e1565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110705760405162461bcd60e51b81526004016104e190612e64565b611079836122bc565b670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006110ad600061268a565b6110b79190613021565b6110c19190612eea565b8211156111055760405162461bcd60e51b81526020600482015260126024820152710d8d2e2ead2c8c2e8ca40e8dede40daeac6d60731b60448201526064016104e1565b6001600160a01b0380841660009081526004602052604090205461114e917f00000000000000000000000000000000000000000000000000000000000000008116911684612759565b6001600160a01b038084166000908152600460208190526040808320549051631d5a3f7360e21b815292931691637568fdcc91611198918791879101918252602082015260400190565b602060405180830381600087803b1580156111b257600080fd5b505af11580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190612d43565b90506111f68482611a60565b50505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112445760405162461bcd60e51b81526004016104e190612e64565b610dbe61281a565b6000611259600080611fd2565b905090565b60008061126a83611c69565b9050670de0b6b3a764000061129f7f000000000000000000000000000000000000000000000000000000000000000083613021565b6112a99190612eea565b9150505b919050565b600260005414156112d55760405162461bcd60e51b81526004016104e190612e9b565b60026000556112e2611b9c565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461132a5760405162461bcd60e51b81526004016104e190612e00565b6040516361bfb47160e11b81523060048201526000906001600160a01b0383169063c37f68e29060240160806040518083038186803b15801561136c57600080fd5b505afa158015611380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a49190612d5b565b509250505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561140457600080fd5b505afa158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c9190612b61565b60405163fc57d4df60e01b81526001600160a01b03858116600483015291925060009183169063fc57d4df9060240160206040518083038186803b15801561148357600080fd5b505afa158015611497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bb9190612d43565b306001600160a01b031663d62429ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114f457600080fd5b505afa158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c9190612d43565b61153e90670de0b6b3a7640000613021565b6115489190612eea565b90508281116115695760405162461bcd60e51b81526004016104e190612e37565b61157c846115778584613040565b611ddc565b505060016000555050565b6000806115946000611c69565b9050670de0b6b3a7640000610e027f000000000000000000000000000000000000000000000000000000000000000083613021565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116115760405162461bcd60e51b81526004016104e190612e64565b61161a836122bc565b6001600160a01b0380841660009081526004602081905260408083205490516301369f5560e71b815292931691639b4faa809161165d9187910190815260200190565b602060405180830381600087803b15801561167757600080fd5b505af115801561168b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116af9190612d43565b9050818111156117015760405162461bcd60e51b815260206004820152601a60248201527f746f6f206d75636820636f6c6c61746572616c206e656564656400000000000060448201526064016104e1565b670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000611735600061268a565b61173f9190613021565b6117499190612eea565b81111561178d5760405162461bcd60e51b81526020600482015260126024820152710d8d2e2ead2c8c2e8ca40e8dede40daeac6d60731b60448201526064016104e1565b6001600160a01b038085166000908152600460205260409020546117d6917f00000000000000000000000000000000000000000000000000000000000000008116911683612759565b6001600160a01b03848116600090815260046020819052604091829020549151635cf1aaf560e11b81529081018690526024810185905291169063b9e355ea90604401602060405180830381600087803b15801561183357600080fd5b505af1158015611847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186b9190612d43565b506111f68484611a60565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118ee5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f742074686520676f7665726e6f7200000000000060448201526064016104e1565b600255565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461193b5760405162461bcd60e51b81526004016104e190612e64565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156119bd5760405162461bcd60e51b815260206004820152601a60248201527f7365697a6520636f6c6c61746572616c206e6f7420616c6c6f7700000000000060448201526064016104e1565b6119f16001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083611be2565b5050565b6040516001600160a01b03808516602483015283166044820152606481018290526111f69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612855565b611ae68282846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9e57600080fd5b505afa158015611ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad69190612b61565b6001600160a01b03169190612759565b60405163073a938160e11b8152600481018290526001600160a01b03831690630e75270290602401602060405180830381600087803b158015611b2857600080fd5b505af1158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b609190612d43565b156119f15760405162461bcd60e51b815260206004820152600c60248201526b1c995c185e4819985a5b195960a21b60448201526064016104e1565b60015460ff1615610dbe5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104e1565b6040516001600160a01b038316602482015260448101829052611c1290849063a9059cbb60e01b90606401611a29565b505050565b611c1f612927565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080611c758361268a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611cd257600080fd5b505afa158015611ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0a9190612d90565b90506000611d19826012613057565b611d2490600a612f50565b611d2e9084613021565b9050670de0b6b3a7640000600360009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8757600080fd5b505afa158015611d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbf9190612d43565b611dc99083613021565b611dd39190612eea565b95945050505050565b306001600160a01b031663d62429ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1557600080fd5b505afa158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4d9190612d43565b611e578383611fd2565b1115611e755760405162461bcd60e51b81526004016104e190612e37565b60405163317afabb60e21b8152600481018290526001600160a01b0383169063c5ebeaec90602401602060405180830381600087803b158015611eb757600080fd5b505af1158015611ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eef9190612d43565b15611f2c5760405162461bcd60e51b815260206004820152600d60248201526c189bdc9c9bddc819985a5b1959609a1b60448201526064016104e1565b6119f17f000000000000000000000000000000000000000000000000000000000000000082846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8a57600080fd5b505afa158015611f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc29190612b61565b6001600160a01b03169190611be2565b604051632aff3bff60e21b8152306004820152600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abfceffc9060240160006040518083038186803b15801561203857600080fd5b505afa15801561204c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120749190810190612b7d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156120d157600080fd5b505afa1580156120e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121099190612b61565b905060005b82518110156122b157600083828151811061213957634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516361bfb47160e11b815230600482015290915060009081906001600160a01b0384169063c37f68e29060240160806040518083038186803b15801561218b57600080fd5b505afa15801561219f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c39190612d5b565b5092505050896001600160a01b0316836001600160a01b031614156121f3576121ec8982612ed2565b91506121f7565b8091505b60405163fc57d4df60e01b81526001600160a01b038481166004830152670de0b6b3a7640000919087169063fc57d4df9060240160206040518083038186803b15801561224357600080fd5b505afa158015612257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227b9190612d43565b6122859084613021565b61228f9190612eea565b6122999088612ed2565b965050505080806122a9906130a6565b91505061210e565b509195945050505050565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156122f757600080fd5b505afa15801561230b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232f9190612b61565b9050306001600160a01b0316634031234c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561236a57600080fd5b505afa15801561237e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a29190612d43565b306001600160a01b0316638696465e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123db57600080fd5b505afa1580156123ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124139190612d43565b116124535760405162461bcd60e51b815260206004820152601060248201526f6e6f74206c6971756964617461626c6560801b60448201526064016104e1565b6001600160a01b03828116600090815260046020526040902054166124ac5760405162461bcd60e51b815260206004820152600f60248201526e32b6b83a3c9031b7b73b32b93a32b960891b60448201526064016104e1565b6001600160a01b038281166000908152600460208181526040928390205483516367e828bf60e01b815293517f000000000000000000000000000000000000000000000000000000000000000086169591909116936367e828bf93818101939291829003018186803b15801561252157600080fd5b505afa158015612535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125599190612b61565b6001600160a01b0316146125a75760405162461bcd60e51b815260206004820152601560248201527436b4b9b6b0ba31b41039b7bab931b2903a37b5b2b760591b60448201526064016104e1565b6001600160a01b0382811660009081526004602081815260409283902054835163b269681d60e01b8152935185871695919091169363b269681d93818101939291829003018186803b1580156125fc57600080fd5b505afa158015612610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126349190612b61565b6001600160a01b0316146119f15760405162461bcd60e51b815260206004820152601a60248201527f6d69736d617463682064657374696e6174696f6e20746f6b656e00000000000060448201526064016104e1565b6040516370a0823160e01b8152306004820152600090819083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156126f057600080fd5b505afa158015612704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127289190612d43565b6127329190613040565b905060025460001415801561274957508060025411155b1561275357506002545b92915050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156127a557600080fd5b505afa1580156127b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127dd9190612d43565b6127e79190612ed2565b6040516001600160a01b0385166024820152604481018290529091506111f690859063095ea7b360e01b90606401611a29565b612822611b9c565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611c4c565b60006128aa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129709092919063ffffffff16565b805190915015611c1257808060200190518101906128c89190612cac565b611c125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104e1565b60015460ff16610dbe5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104e1565b606061297f8484600085612987565b949350505050565b6060824710156129e85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104e1565b6001600160a01b0385163b612a3f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e1565b600080866001600160a01b03168587604051612a5b9190612db1565b60006040518083038185875af1925050503d8060008114612a98576040519150601f19603f3d011682016040523d82523d6000602084013e612a9d565b606091505b5091509150612aad828286612ab8565b979650505050505050565b60608315612ac7575081610ea0565b825115612ad75782518084602001fd5b8160405162461bcd60e51b81526004016104e19190612dcd565b80516112ad816130ed565b60008083601f840112612b0d578182fd5b50813567ffffffffffffffff811115612b24578182fd5b6020830191508360208083028501011115612b3e57600080fd5b9250929050565b600060208284031215612b56578081fd5b8135610ea0816130ed565b600060208284031215612b72578081fd5b8151610ea0816130ed565b60006020808385031215612b8f578182fd5b825167ffffffffffffffff80821115612ba6578384fd5b818501915085601f830112612bb9578384fd5b815181811115612bcb57612bcb6130d7565b838102604051601f19603f83011681018181108582111715612bef57612bef6130d7565b604052828152858101935084860182860187018a1015612c0d578788fd5b8795505b83861015612c3657612c2281612af1565b855260019590950194938601938601612c11565b5098975050505050505050565b60008060008060408587031215612c58578283fd5b843567ffffffffffffffff80821115612c6f578485fd5b612c7b88838901612afc565b90965094506020870135915080821115612c93578384fd5b50612ca087828801612afc565b95989497509550505050565b600060208284031215612cbd578081fd5b81518015158114610ea0578182fd5b60008060408385031215612cde578182fd5b8235612ce9816130ed565b946020939093013593505050565b600080600060608486031215612d0b578283fd5b8335612d16816130ed565b95602085013595506040909401359392505050565b600060208284031215612d3c578081fd5b5035919050565b600060208284031215612d54578081fd5b5051919050565b60008060008060808587031215612d70578384fd5b505082516020840151604085015160609095015191969095509092509050565b600060208284031215612da1578081fd5b815160ff81168114610ea0578182fd5b60008251612dc381846020870161307a565b9190910192915050565b6000602082528251806020840152612dec81604085016020870161307a565b601f01601f19169190910160400192915050565b6020808252601a908201527f63616c6c6572206973206e6f742074686520626f72726f776572000000000000604082015260600190565b6020808252601390820152721d5b99195c98dbdb1b185d195c985b1a5e9959606a1b604082015260600190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206578656375746f72000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115612ee557612ee56130c1565b500190565b600082612f0557634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611612f1c5750612f47565b818704821115612f2e57612f2e6130c1565b80861615612f3b57918102915b9490941c938002612f0d565b94509492505050565b6000610ea060001960ff851684600082612f6c57506001610ea0565b81612f7957506000610ea0565b8160018114612f8f5760028114612f9957612fc6565b6001915050610ea0565b60ff841115612faa57612faa6130c1565b6001841b915084821115612fc057612fc06130c1565b50610ea0565b5060208310610133831016604e8410600b8410161715612ff9575081810a83811115612ff457612ff46130c1565b610ea0565b6130068484846001612f0a565b808604821115613018576130186130c1565b02949350505050565b600081600019048311821515161561303b5761303b6130c1565b500290565b600082821015613052576130526130c1565b500390565b600060ff821660ff841680821015613071576130716130c1565b90039392505050565b60005b8381101561309557818101518382015260200161307d565b838111156111f65750506000910152565b60006000198214156130ba576130ba6130c1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461310257600080fd5b5056fea2646970667358221220578678d8872bf83c725f87aa0c585dafe925cb00746927f2a21982c7710520df64736f6c63430008020033a2646970667358221220cb7183554e7a0f17daa751f481efa63101cf43923debd860c347684d08ca1e1964736f6c63430008020033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063715018a61162000063578063715018a614620001025780638da5cb5b146200010e5780639f1aec601462000120578063f2fde38b14620001375762000088565b80634281e769146200008d5780634e6873c714620000c15780635fe3b56714620000da575b600080fd5b620000a46200009e36600462000556565b6200014e565b6040516001600160a01b0390911681526020015b60405180910390f35b620000cb62000179565b604051620000b891906200056f565b620000a47f000000000000000000000000000000000000000000000000000000000000000081565b6200010c620001dd565b005b6000546001600160a01b0316620000a4565b620000a462000131366004620004c2565b620001f5565b6200010c620001483660046200049e565b62000344565b600181815481106200015f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60606001805480602002602001604051908101604052809291908181526020018280548015620001d357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620001b4575b5050505050905090565b620001e7620003c7565b620001f3600062000423565b565b600062000201620003c7565b60008a8a8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b8b8b6040516200023b9062000473565b6001600160a01b039a8b168152988a1660208a0152968916604089015294881660608801529287166080870152951660a085015260c084019490945260e083019390935261010082019290925261012081019190915261014001604051809103906000f080158015620002b2573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383169081179091556040519081529091507fbf1d3f7d480ac8371bfbfac85c84fdac76519ac5d83d3aa9ed57f6e1ca171fa69060200160405180910390a19a9950505050505050505050565b6200034e620003c7565b6001600160a01b038116620003b95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620003c48162000423565b50565b6000546001600160a01b03163314620001f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003b0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61365580620005bf83390190565b80356001600160a01b03811681146200049957600080fd5b919050565b600060208284031215620004b0578081fd5b620004bb8262000481565b9392505050565b60008060008060008060008060006101208a8c031215620004e1578485fd5b620004ec8a62000481565b9850620004fc60208b0162000481565b97506200050c60408b0162000481565b96506200051c60608b0162000481565b95506200052c60808b0162000481565b989b979a50959894979660a0860135965060c08601359560e0810135955061010001359350915050565b60006020828403121562000568578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015620005b25783516001600160a01b0316835292840192918401916001016200058b565b5090969550505050505056fe6101806040523480156200001257600080fd5b506040516200365538038062003655833981016040819052620000359162000314565b60016000819055805460ff191690556001600160601b031960608b811b82166080528a811b821660a05289811b821660c05288811b821660e05287901b1661010052600380546001600160a01b038781166001600160a01b031990921691909117918290556101208690526101408590526101608490526002839055604080516321df0da760e01b8152905192909116916321df0da791600480820192602092909190829003018186803b158015620000ed57600080fd5b505afa15801562000102573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001289190620002f0565b6001600160a01b0316866001600160a01b0316146200018e5760405162461bcd60e51b815260206004820152601360248201527f6d69736d6174636820707269636520666565640000000000000000000000000060448201526064015b60405180910390fd5b600084118015620001a75750670de0b6b3a76400008411155b620001f55760405162461bcd60e51b815260206004820152601960248201527f696e76616c696420636f6c6c61746572616c20666163746f7200000000000000604482015260640162000185565b8383101580156200020e5750670de0b6b3a76400008311155b6200025c5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206c69717569646174696f6e20666163746f72000000000000604482015260640162000185565b600082118015620002755750670de0b6b3a76400008211155b620002c35760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420636c6f736520666163746f72000000000000000000000000604482015260640162000185565b50505050505050505050620003be565b80516001600160a01b0381168114620002eb57600080fd5b919050565b60006020828403121562000302578081fd5b6200030d82620002d3565b9392505050565b6000806000806000806000806000806101408b8d03121562000334578586fd5b6200033f8b620002d3565b99506200034f60208c01620002d3565b98506200035f60408c01620002d3565b97506200036f60608c01620002d3565b96506200037f60808c01620002d3565b95506200038f60a08c01620002d3565b945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c61012051610140516101605161313b6200051a600039600081816101f901528181611084015261170c0152600081816102ab0152610ddd0152600081816104760152818161127a01526115a401526000818161044f0152818161076901528181610d1e01528181610f9b01528181611125015281816117ad0152818161193d01528181611c7b015281816124da01526126ae015260008181610334015281816113ad01528181611ff6015261207a01526000818161023301528181610eb201526118810152600081816103a7015281816104fa01528181610b1801528181610bc301528181610d4001528181610e4d015281816112ed0152611f310152600081816104040152818161065e01528181610d790152818161103301528181611207015281816115d4015281816118fe01526119cc015261313b6000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063741bef1a11610104578063c34c08e5116100a2578063d8dfeb4511610071578063d8dfeb451461044a578063df011c4114610471578063e6d1544014610498578063eb9253c0146104ab576101da565b8063c34c08e5146103ff578063d2bb18e914610426578063d62429ba1461042f578063d785d03914610437576101da565b80638456cb59116100de5780638456cb59146103c95780638696465e146103d157806388ba0a14146103d95780639bd5c7c5146103ec576101da565b8063741bef1a1461037c5780637b3e99041461038f5780637df1f1b9146103a2576101da565b80633f4ba83a1161017c5780635c975abb1161014b5780635c975abb146103195780635fe3b5671461032f5780636a0e22ac14610356578063724e78da14610369576101da565b80633f4ba83a146102cd5780634031234c146102d557806340a05acb146102dd5780634b8a352914610306576101da565b806315b09fee116101b857806315b09fee1461026d57806322867d78146102805780632e1a7d4d14610293578063352ade55146102a6576101da565b806304949679146101df57806305308b9f146101f45780630c340a241461022e575b600080fd5b6101f26101ed366004612b45565b6104be565b005b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610225565b6101f261027b366004612c43565b610653565b6101f261028e366004612ccc565b610ae5565b6101f26102a1366004612d2b565b610b90565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f2610d6e565b61021b610dc0565b6102556102eb366004612b45565b6004602052600090815260409020546001600160a01b031681565b6101f2610314366004612ccc565b610e12565b60015460ff166040519015158152602001610225565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b61021b610364366004612ccc565b610e94565b6101f2610377366004612b45565b610ea7565b600354610255906001600160a01b031681565b6101f261039d366004612cf7565b611028565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6101f26111fc565b61021b61124c565b61021b6103e7366004612d2b565b61125e565b6101f26103fa366004612b45565b6112b2565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b61021b60025481565b61021b611587565b6101f2610445366004612cf7565b6115c9565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f26104a6366004612d2b565b611876565b6101f26104b9366004612ccc565b6118f3565b600260005414156104ea5760405162461bcd60e51b81526004016104e190612e9b565b60405180910390fd5b6002600055336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105375760405162461bcd60e51b81526004016104e190612e00565b6040516305eff7ef60e21b81523060048201526000906001600160a01b038316906317bfdfbc90602401602060405180830381600087803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190612d43565b90506000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f057600080fd5b505afa158015610604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106289190612b61565b905061063f6001600160a01b0382163330856119f5565b6106498383611a60565b5050600160005550565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461069b5760405162461bcd60e51b81526004016104e190612e64565b8281146106dc5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60448201526064016104e1565b60005b83811015610ade57600083838381811061070957634e487b7160e01b600052603260045260246000fd5b905060200201602081019061071e9190612b45565b6001600160a01b031614156107675760405162461bcd60e51b815260206004820152600f60248201526e32b6b83a3c9031b7b73b32b93a32b960891b60448201526064016104e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168383838181106107b157634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107c69190612b45565b6001600160a01b03166367e828bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107fe57600080fd5b505afa158015610812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108369190612b61565b6001600160a01b0316146108845760405162461bcd60e51b815260206004820152601560248201527436b4b9b6b0ba31b41039b7bab931b2903a37b5b2b760591b60448201526064016104e1565b8484828181106108a457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108b99190612b45565b6001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190612b61565b6001600160a01b031683838381811061095257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109679190612b45565b6001600160a01b031663b269681d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099f57600080fd5b505afa1580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d79190612b61565b6001600160a01b031614610a2d5760405162461bcd60e51b815260206004820152601a60248201527f6d69736d617463682064657374696e6174696f6e20746f6b656e00000000000060448201526064016104e1565b828282818110610a4d57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a629190612b45565b60046000878785818110610a8657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a9b9190612b45565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905580610ad6816130a6565b9150506106df565b5050505050565b60026000541415610b085760405162461bcd60e51b81526004016104e190612e9b565b6002600055336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b555760405162461bcd60e51b81526004016104e190612e00565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f057600080fd5b60026000541415610bb35760405162461bcd60e51b81526004016104e190612e9b565b6002600055336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c005760405162461bcd60e51b81526004016104e190612e00565b6000306001600160a01b0316638696465e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3b57600080fd5b505afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190612d43565b90508015610d1157610c83611b9c565b60405163222e828560e21b81526004810183905230906388ba0a149060240160206040518083038186803b158015610cba57600080fd5b505afa158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf29190612d43565b811115610d115760405162461bcd60e51b81526004016104e190612e37565b610d656001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611be2565b50506001600055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610db65760405162461bcd60e51b81526004016104e190612e64565b610dbe611c17565b565b600080610dcd6000611c69565b9050670de0b6b3a7640000610e027f000000000000000000000000000000000000000000000000000000000000000083613021565b610e0c9190612eea565b91505090565b60026000541415610e355760405162461bcd60e51b81526004016104e190612e9b565b6002600055610e42611b9c565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e8a5760405162461bcd60e51b81526004016104e190612e00565b610d658282611ddc565b6000610ea08383611fd2565b9392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f1f5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f742074686520676f7665726e6f7200000000000060448201526064016104e1565b806001600160a01b03166321df0da76040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5857600080fd5b505afa158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f909190612b61565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146110065760405162461bcd60e51b81526020600482015260136024820152721b5a5cdb585d18da081c1c9a58d94819995959606a1b60448201526064016104e1565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110705760405162461bcd60e51b81526004016104e190612e64565b611079836122bc565b670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006110ad600061268a565b6110b79190613021565b6110c19190612eea565b8211156111055760405162461bcd60e51b81526020600482015260126024820152710d8d2e2ead2c8c2e8ca40e8dede40daeac6d60731b60448201526064016104e1565b6001600160a01b0380841660009081526004602052604090205461114e917f00000000000000000000000000000000000000000000000000000000000000008116911684612759565b6001600160a01b038084166000908152600460208190526040808320549051631d5a3f7360e21b815292931691637568fdcc91611198918791879101918252602082015260400190565b602060405180830381600087803b1580156111b257600080fd5b505af11580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190612d43565b90506111f68482611a60565b50505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112445760405162461bcd60e51b81526004016104e190612e64565b610dbe61281a565b6000611259600080611fd2565b905090565b60008061126a83611c69565b9050670de0b6b3a764000061129f7f000000000000000000000000000000000000000000000000000000000000000083613021565b6112a99190612eea565b9150505b919050565b600260005414156112d55760405162461bcd60e51b81526004016104e190612e9b565b60026000556112e2611b9c565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461132a5760405162461bcd60e51b81526004016104e190612e00565b6040516361bfb47160e11b81523060048201526000906001600160a01b0383169063c37f68e29060240160806040518083038186803b15801561136c57600080fd5b505afa158015611380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a49190612d5b565b509250505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561140457600080fd5b505afa158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c9190612b61565b60405163fc57d4df60e01b81526001600160a01b03858116600483015291925060009183169063fc57d4df9060240160206040518083038186803b15801561148357600080fd5b505afa158015611497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bb9190612d43565b306001600160a01b031663d62429ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114f457600080fd5b505afa158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c9190612d43565b61153e90670de0b6b3a7640000613021565b6115489190612eea565b90508281116115695760405162461bcd60e51b81526004016104e190612e37565b61157c846115778584613040565b611ddc565b505060016000555050565b6000806115946000611c69565b9050670de0b6b3a7640000610e027f000000000000000000000000000000000000000000000000000000000000000083613021565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116115760405162461bcd60e51b81526004016104e190612e64565b61161a836122bc565b6001600160a01b0380841660009081526004602081905260408083205490516301369f5560e71b815292931691639b4faa809161165d9187910190815260200190565b602060405180830381600087803b15801561167757600080fd5b505af115801561168b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116af9190612d43565b9050818111156117015760405162461bcd60e51b815260206004820152601a60248201527f746f6f206d75636820636f6c6c61746572616c206e656564656400000000000060448201526064016104e1565b670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000611735600061268a565b61173f9190613021565b6117499190612eea565b81111561178d5760405162461bcd60e51b81526020600482015260126024820152710d8d2e2ead2c8c2e8ca40e8dede40daeac6d60731b60448201526064016104e1565b6001600160a01b038085166000908152600460205260409020546117d6917f00000000000000000000000000000000000000000000000000000000000000008116911683612759565b6001600160a01b03848116600090815260046020819052604091829020549151635cf1aaf560e11b81529081018690526024810185905291169063b9e355ea90604401602060405180830381600087803b15801561183357600080fd5b505af1158015611847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186b9190612d43565b506111f68484611a60565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118ee5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f742074686520676f7665726e6f7200000000000060448201526064016104e1565b600255565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461193b5760405162461bcd60e51b81526004016104e190612e64565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156119bd5760405162461bcd60e51b815260206004820152601a60248201527f7365697a6520636f6c6c61746572616c206e6f7420616c6c6f7700000000000060448201526064016104e1565b6119f16001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083611be2565b5050565b6040516001600160a01b03808516602483015283166044820152606481018290526111f69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612855565b611ae68282846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9e57600080fd5b505afa158015611ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad69190612b61565b6001600160a01b03169190612759565b60405163073a938160e11b8152600481018290526001600160a01b03831690630e75270290602401602060405180830381600087803b158015611b2857600080fd5b505af1158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b609190612d43565b156119f15760405162461bcd60e51b815260206004820152600c60248201526b1c995c185e4819985a5b195960a21b60448201526064016104e1565b60015460ff1615610dbe5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104e1565b6040516001600160a01b038316602482015260448101829052611c1290849063a9059cbb60e01b90606401611a29565b505050565b611c1f612927565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080611c758361268a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611cd257600080fd5b505afa158015611ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0a9190612d90565b90506000611d19826012613057565b611d2490600a612f50565b611d2e9084613021565b9050670de0b6b3a7640000600360009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8757600080fd5b505afa158015611d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbf9190612d43565b611dc99083613021565b611dd39190612eea565b95945050505050565b306001600160a01b031663d62429ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1557600080fd5b505afa158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4d9190612d43565b611e578383611fd2565b1115611e755760405162461bcd60e51b81526004016104e190612e37565b60405163317afabb60e21b8152600481018290526001600160a01b0383169063c5ebeaec90602401602060405180830381600087803b158015611eb757600080fd5b505af1158015611ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eef9190612d43565b15611f2c5760405162461bcd60e51b815260206004820152600d60248201526c189bdc9c9bddc819985a5b1959609a1b60448201526064016104e1565b6119f17f000000000000000000000000000000000000000000000000000000000000000082846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8a57600080fd5b505afa158015611f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc29190612b61565b6001600160a01b03169190611be2565b604051632aff3bff60e21b8152306004820152600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abfceffc9060240160006040518083038186803b15801561203857600080fd5b505afa15801561204c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120749190810190612b7d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156120d157600080fd5b505afa1580156120e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121099190612b61565b905060005b82518110156122b157600083828151811061213957634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516361bfb47160e11b815230600482015290915060009081906001600160a01b0384169063c37f68e29060240160806040518083038186803b15801561218b57600080fd5b505afa15801561219f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c39190612d5b565b5092505050896001600160a01b0316836001600160a01b031614156121f3576121ec8982612ed2565b91506121f7565b8091505b60405163fc57d4df60e01b81526001600160a01b038481166004830152670de0b6b3a7640000919087169063fc57d4df9060240160206040518083038186803b15801561224357600080fd5b505afa158015612257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227b9190612d43565b6122859084613021565b61228f9190612eea565b6122999088612ed2565b965050505080806122a9906130a6565b91505061210e565b509195945050505050565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156122f757600080fd5b505afa15801561230b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232f9190612b61565b9050306001600160a01b0316634031234c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561236a57600080fd5b505afa15801561237e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a29190612d43565b306001600160a01b0316638696465e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123db57600080fd5b505afa1580156123ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124139190612d43565b116124535760405162461bcd60e51b815260206004820152601060248201526f6e6f74206c6971756964617461626c6560801b60448201526064016104e1565b6001600160a01b03828116600090815260046020526040902054166124ac5760405162461bcd60e51b815260206004820152600f60248201526e32b6b83a3c9031b7b73b32b93a32b960891b60448201526064016104e1565b6001600160a01b038281166000908152600460208181526040928390205483516367e828bf60e01b815293517f000000000000000000000000000000000000000000000000000000000000000086169591909116936367e828bf93818101939291829003018186803b15801561252157600080fd5b505afa158015612535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125599190612b61565b6001600160a01b0316146125a75760405162461bcd60e51b815260206004820152601560248201527436b4b9b6b0ba31b41039b7bab931b2903a37b5b2b760591b60448201526064016104e1565b6001600160a01b0382811660009081526004602081815260409283902054835163b269681d60e01b8152935185871695919091169363b269681d93818101939291829003018186803b1580156125fc57600080fd5b505afa158015612610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126349190612b61565b6001600160a01b0316146119f15760405162461bcd60e51b815260206004820152601a60248201527f6d69736d617463682064657374696e6174696f6e20746f6b656e00000000000060448201526064016104e1565b6040516370a0823160e01b8152306004820152600090819083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156126f057600080fd5b505afa158015612704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127289190612d43565b6127329190613040565b905060025460001415801561274957508060025411155b1561275357506002545b92915050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156127a557600080fd5b505afa1580156127b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127dd9190612d43565b6127e79190612ed2565b6040516001600160a01b0385166024820152604481018290529091506111f690859063095ea7b360e01b90606401611a29565b612822611b9c565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611c4c565b60006128aa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129709092919063ffffffff16565b805190915015611c1257808060200190518101906128c89190612cac565b611c125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104e1565b60015460ff16610dbe5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104e1565b606061297f8484600085612987565b949350505050565b6060824710156129e85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104e1565b6001600160a01b0385163b612a3f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e1565b600080866001600160a01b03168587604051612a5b9190612db1565b60006040518083038185875af1925050503d8060008114612a98576040519150601f19603f3d011682016040523d82523d6000602084013e612a9d565b606091505b5091509150612aad828286612ab8565b979650505050505050565b60608315612ac7575081610ea0565b825115612ad75782518084602001fd5b8160405162461bcd60e51b81526004016104e19190612dcd565b80516112ad816130ed565b60008083601f840112612b0d578182fd5b50813567ffffffffffffffff811115612b24578182fd5b6020830191508360208083028501011115612b3e57600080fd5b9250929050565b600060208284031215612b56578081fd5b8135610ea0816130ed565b600060208284031215612b72578081fd5b8151610ea0816130ed565b60006020808385031215612b8f578182fd5b825167ffffffffffffffff80821115612ba6578384fd5b818501915085601f830112612bb9578384fd5b815181811115612bcb57612bcb6130d7565b838102604051601f19603f83011681018181108582111715612bef57612bef6130d7565b604052828152858101935084860182860187018a1015612c0d578788fd5b8795505b83861015612c3657612c2281612af1565b855260019590950194938601938601612c11565b5098975050505050505050565b60008060008060408587031215612c58578283fd5b843567ffffffffffffffff80821115612c6f578485fd5b612c7b88838901612afc565b90965094506020870135915080821115612c93578384fd5b50612ca087828801612afc565b95989497509550505050565b600060208284031215612cbd578081fd5b81518015158114610ea0578182fd5b60008060408385031215612cde578182fd5b8235612ce9816130ed565b946020939093013593505050565b600080600060608486031215612d0b578283fd5b8335612d16816130ed565b95602085013595506040909401359392505050565b600060208284031215612d3c578081fd5b5035919050565b600060208284031215612d54578081fd5b5051919050565b60008060008060808587031215612d70578384fd5b505082516020840151604085015160609095015191969095509092509050565b600060208284031215612da1578081fd5b815160ff81168114610ea0578182fd5b60008251612dc381846020870161307a565b9190910192915050565b6000602082528251806020840152612dec81604085016020870161307a565b601f01601f19169190910160400192915050565b6020808252601a908201527f63616c6c6572206973206e6f742074686520626f72726f776572000000000000604082015260600190565b6020808252601390820152721d5b99195c98dbdb1b185d195c985b1a5e9959606a1b604082015260600190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206578656375746f72000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115612ee557612ee56130c1565b500190565b600082612f0557634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611612f1c5750612f47565b818704821115612f2e57612f2e6130c1565b80861615612f3b57918102915b9490941c938002612f0d565b94509492505050565b6000610ea060001960ff851684600082612f6c57506001610ea0565b81612f7957506000610ea0565b8160018114612f8f5760028114612f9957612fc6565b6001915050610ea0565b60ff841115612faa57612faa6130c1565b6001841b915084821115612fc057612fc06130c1565b50610ea0565b5060208310610133831016604e8410600b8410161715612ff9575081810a83811115612ff457612ff46130c1565b610ea0565b6130068484846001612f0a565b808604821115613018576130186130c1565b02949350505050565b600081600019048311821515161561303b5761303b6130c1565b500290565b600082821015613052576130526130c1565b500390565b600060ff821660ff841680821015613071576130716130c1565b90039392505050565b60005b8381101561309557818101518382015260200161307d565b838111156111f65750506000910152565b60006000198214156130ba576130ba6130c1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461310257600080fd5b5056fea2646970667358221220578678d8872bf83c725f87aa0c585dafe925cb00746927f2a21982c7710520df64736f6c63430008020033a2646970667358221220cb7183554e7a0f17daa751f481efa63101cf43923debd860c347684d08ca1e1964736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/IBAgreementFactory.sol:IBAgreementFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3773,
        "contract": "contracts/IBAgreementFactory.sol:IBAgreementFactory",
        "label": "ibAgreements",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}