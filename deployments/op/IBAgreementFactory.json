{
  "address": "0x8Bd68d02251B8466E802436e96734082C664eEEf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ibAgreement",
          "type": "address"
        }
      ],
      "name": "IBAgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_closeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralCap",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ibAgreements",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd91cc5039c42edc4129b86b32d02dcfac0a555b8242ca67936055f12b33598dd",
  "receipt": {
    "to": null,
    "from": "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "contractAddress": "0x8Bd68d02251B8466E802436e96734082C664eEEf",
    "transactionIndex": 0,
    "gasUsed": "3216553",
    "logsBloom": "0x
    "blockHash": "0x3c5f3ee52365cdde9f3310236a46ee2b88c620a8cda7955cf143f93535a05dff",
    "transactionHash": "0xd91cc5039c42edc4129b86b32d02dcfac0a555b8242ca67936055f12b33598dd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15105524,
        "transactionHash": "0xd91cc5039c42edc4129b86b32d02dcfac0a555b8242ca67936055f12b33598dd",
        "address": "0x8Bd68d02251B8466E802436e96734082C664eEEf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ba608d6a354fbeb41fd7cc799e7f09b2612ab26"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3c5f3ee52365cdde9f3310236a46ee2b88c620a8cda7955cf143f93535a05dff"
      }
    ],
    "blockNumber": 15105524,
    "cumulativeGasUsed": "3216553",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE0B57FEEd45e7D908f2d0DaCd26F113Cf26715BF"
  ],
  "numDeployments": 1,
  "solcInputHash": "d5dc399c4ea55b9457dcf313eca9baab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ibAgreement\",\"type\":\"address\"}],\"name\":\"IBAgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralCap\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ibAgreements\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IBAgreementFactory.sol\":\"IBAgreementFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/IBAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IComptroller.sol\\\";\\nimport \\\"./interfaces/IConverter.sol\\\";\\nimport \\\"./interfaces/IIToken.sol\\\";\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\n\\ncontract IBAgreementV3 is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable executor;\\n    address public immutable borrower;\\n    address public immutable governor;\\n    IComptroller public immutable comptroller;\\n    IERC20 public immutable collateral;\\n    uint256 public immutable collateralFactor;\\n    uint256 public immutable liquidationFactor;\\n    uint256 public immutable closeFactor;\\n    uint256 public collateralCap;\\n    IPriceFeed public priceFeed;\\n    mapping(IIToken => IConverter) public converters;\\n\\n    modifier onlyBorrower() {\\n        require(msg.sender == borrower, \\\"caller is not the borrower\\\");\\n        _;\\n    }\\n\\n    modifier onlyExecutor() {\\n        require(msg.sender == executor, \\\"caller is not the executor\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, \\\"caller is not the governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the values for {executor}, {borrower}, {governor}, {comptroller}, {collateral}, {priceFeed}, {collateralFactor}, {liquidationFactor}, {closeFactor}, and {collateralCap}.\\n     *\\n     * {collateral} must be a vanilla ERC20 token.\\n     *\\n     * All of these values except {priceFeed} and {collateralCap} are immutable: they can only be set once during construction.\\n     */\\n    constructor(\\n        address _executor,\\n        address _borrower,\\n        address _governor,\\n        address _comptroller,\\n        address _collateral,\\n        address _priceFeed,\\n        uint256 _collateralFactor,\\n        uint256 _liquidationFactor,\\n        uint256 _closeFactor,\\n        uint256 _collateralCap\\n    ) {\\n        executor = _executor;\\n        borrower = _borrower;\\n        governor = _governor;\\n        comptroller = IComptroller(_comptroller);\\n        collateral = IERC20(_collateral);\\n        priceFeed = IPriceFeed(_priceFeed);\\n        collateralFactor = _collateralFactor;\\n        liquidationFactor = _liquidationFactor;\\n        closeFactor = _closeFactor;\\n        collateralCap = _collateralCap;\\n\\n        require(_collateral == priceFeed.getToken(), \\\"mismatch price feed\\\");\\n        require(\\n            _collateralFactor > 0 && _collateralFactor <= 1e18,\\n            \\\"invalid collateral factor\\\"\\n        );\\n        require(\\n            _liquidationFactor >= _collateralFactor &&\\n                _liquidationFactor <= 1e18,\\n            \\\"invalid liquidation factor\\\"\\n        );\\n        require(\\n            _closeFactor > 0 && _closeFactor <= 1e18,\\n            \\\"invalid close factor\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the current debt in USD value of this contract\\n     * @return The borrow balance in USD value\\n     */\\n    function debtUSD() external view returns (uint256) {\\n        return getHypotheticalDebtValue(address(0), 0);\\n    }\\n\\n    /**\\n     * @notice Get the hypothetical debt in USD value of this contract after borrow\\n     * @param market The market\\n     * @param borrowAmount The hypothetical borrow amount\\n     * @return The hypothetical debt in USD value\\n     */\\n    function hypotheticalDebtUSD(IIToken market, uint256 borrowAmount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return getHypotheticalDebtValue(address(market), borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Get the max value in USD to use for borrow in this contract\\n     * @return The USD value\\n     */\\n    function collateralUSD() external view returns (uint256) {\\n        uint256 value = getHypotheticalCollateralValue(0);\\n        return (value * collateralFactor) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Get the hypothetical max value in USD to use for borrow in this contract after withdraw\\n     * @param withdrawAmount The hypothetical withdraw amount\\n     * @return The hypothetical USD value\\n     */\\n    function hypotheticalCollateralUSD(uint256 withdrawAmount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 value = getHypotheticalCollateralValue(withdrawAmount);\\n        return (value * collateralFactor) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Get the lquidation threshold. It represents the max value of collateral that we recongized.\\n     * @dev If the debt is greater than the liquidation threshold, this agreement is liquidatable.\\n     * @return The lquidation threshold\\n     */\\n    function liquidationThreshold() external view returns (uint256) {\\n        uint256 value = getHypotheticalCollateralValue(0);\\n        return (value * liquidationFactor) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Borrow from market if the collateral is sufficient\\n     * @param market The market\\n     * @param amount The borrow amount\\n     */\\n    function borrow(IIToken market, uint256 amount)\\n        external\\n        nonReentrant\\n        onlyBorrower\\n    {\\n        borrowInternal(market, amount);\\n    }\\n\\n    /**\\n     * @notice Borrow max from market with current price\\n     * @param market The market\\n     */\\n    function borrowMax(IIToken market) external nonReentrant onlyBorrower {\\n        (, , uint256 borrowBalance, ) = market.getAccountSnapshot(\\n            address(this)\\n        );\\n\\n        IPriceOracle oracle = IPriceOracle(comptroller.oracle());\\n\\n        uint256 maxBorrowAmount = (this.collateralUSD() * 1e18) /\\n            oracle.getUnderlyingPrice(address(market));\\n        require(maxBorrowAmount > borrowBalance, \\\"undercollateralized\\\");\\n        borrowInternal(market, maxBorrowAmount - borrowBalance);\\n    }\\n\\n    /**\\n     * @notice Withdraw the collateral if sufficient\\n     * @param amount The withdraw amount\\n     */\\n    function withdraw(uint256 amount) external onlyBorrower {\\n        require(\\n            this.debtUSD() <= this.hypotheticalCollateralUSD(amount),\\n            \\\"undercollateralized\\\"\\n        );\\n        collateral.safeTransfer(borrower, amount);\\n    }\\n\\n    /**\\n     * @notice Repay the debts\\n     * @param market The market\\n     * @param amount The repay amount\\n     */\\n    function repay(IIToken market, uint256 amount)\\n        external\\n        nonReentrant\\n        onlyBorrower\\n    {\\n        IERC20 underlying = IERC20(market.underlying());\\n        underlying.safeTransferFrom(msg.sender, address(this), amount);\\n        repayInternal(market, amount);\\n    }\\n\\n    /**\\n     * @notice Fully repay the debts\\n     * @param market The market\\n     */\\n    function repayFull(IIToken market) external nonReentrant onlyBorrower {\\n        // Get the current borrow balance including interests.\\n        uint256 borrowBalance = market.borrowBalanceCurrent(address(this));\\n\\n        IERC20 underlying = IERC20(market.underlying());\\n        underlying.safeTransferFrom(msg.sender, address(this), borrowBalance);\\n        repayInternal(market, borrowBalance);\\n    }\\n\\n    /**\\n     * @notice Seize the tokens\\n     * @param token The token\\n     * @param amount The amount\\n     */\\n    function seize(IERC20 token, uint256 amount) external onlyExecutor {\\n        require(\\n            address(token) != address(collateral),\\n            \\\"seize collateral not allow\\\"\\n        );\\n        token.safeTransfer(executor, amount);\\n    }\\n\\n    /**\\n     * @notice Liquidate with exact collateral amount for a given market\\n     * @param market The market\\n     * @param collateralAmount The collateral amount for liquidation\\n     * @param repayAmountMin The min repay amount after conversion\\n     */\\n    function liquidateWithExactCollateralAmount(\\n        IIToken market,\\n        uint256 collateralAmount,\\n        uint256 repayAmountMin\\n    ) external onlyExecutor {\\n        checkLiquidatable(market);\\n\\n        require(\\n            collateralAmount <=\\n                (getHypotheticalCollateralBalance(0) * closeFactor) / 1e18,\\n            \\\"liquidate too much\\\"\\n        );\\n\\n        // Approve and convert.\\n        IERC20(collateral).safeIncreaseAllowance(\\n            address(converters[market]),\\n            collateralAmount\\n        );\\n        uint256 amountOut = converters[market].convertExactTokensForTokens(\\n            collateralAmount,\\n            repayAmountMin\\n        );\\n\\n        // Repay the debts.\\n        repayInternal(market, amountOut);\\n    }\\n\\n    /**\\n     * @notice Liquidate for exact repay amount for a given market\\n     * @param market The market\\n     * @param repayAmount The desired repay amount\\n     * @param collateralAmountMax The max collateral amount for liquidation\\n     */\\n    function liquidateForExactRepayAmount(\\n        IIToken market,\\n        uint256 repayAmount,\\n        uint256 collateralAmountMax\\n    ) external onlyExecutor {\\n        checkLiquidatable(market);\\n\\n        uint256 amountIn = converters[market].getAmountIn(repayAmount);\\n        require(amountIn <= collateralAmountMax, \\\"too much collateral needed\\\");\\n\\n        require(\\n            amountIn <=\\n                (getHypotheticalCollateralBalance(0) * closeFactor) / 1e18,\\n            \\\"liquidate too much\\\"\\n        );\\n\\n        // Approve and convert.\\n        IERC20(collateral).safeIncreaseAllowance(\\n            address(converters[market]),\\n            amountIn\\n        );\\n        converters[market].convertTokensForExactTokens(\\n            repayAmount,\\n            collateralAmountMax\\n        );\\n\\n        // Repay the debts.\\n        repayInternal(market, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Set the converter for liquidation\\n     * @param _markets The markets\\n     * @param _converters The converters\\n     */\\n    function setConverter(\\n        IIToken[] calldata _markets,\\n        IConverter[] calldata _converters\\n    ) external onlyExecutor {\\n        require(_markets.length == _converters.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            require(address(_converters[i]) != address(0), \\\"empty converter\\\");\\n            require(\\n                _converters[i].source() == address(collateral),\\n                \\\"mismatch source token\\\"\\n            );\\n            require(\\n                _converters[i].destination() == _markets[i].underlying(),\\n                \\\"mismatch destination token\\\"\\n            );\\n            converters[_markets[i]] = IConverter(_converters[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the collateral cap\\n     * @param _collateralCap The new cap\\n     */\\n    function setCollateralCap(uint256 _collateralCap) external onlyGovernor {\\n        collateralCap = _collateralCap;\\n    }\\n\\n    /**\\n     * @notice Set the price feed of the collateral\\n     * @param _priceFeed The new price feed\\n     */\\n    function setPriceFeed(address _priceFeed) external onlyGovernor {\\n        require(\\n            address(collateral) == IPriceFeed(_priceFeed).getToken(),\\n            \\\"mismatch price feed\\\"\\n        );\\n\\n        priceFeed = IPriceFeed(_priceFeed);\\n    }\\n\\n    /* Internal functions */\\n\\n    /**\\n     * @notice Get the current collateral balance, min(balance, cap)\\n     * @param withdrawAmount The hypothetical withdraw amount\\n     * @return The collateral balance\\n     */\\n    function getHypotheticalCollateralBalance(uint256 withdrawAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 balance = collateral.balanceOf(address(this)) - withdrawAmount;\\n        if (collateralCap != 0 && collateralCap <= balance) {\\n            balance = collateralCap;\\n        }\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get the current debt of this contract\\n     * @param borrowMarket The hypothetical borrow market\\n     * @param borrowAmount The hypothetical borrow amount\\n     * @return The borrow balance\\n     */\\n    function getHypotheticalDebtValue(\\n        address borrowMarket,\\n        uint256 borrowAmount\\n    ) internal view returns (uint256) {\\n        uint256 debt;\\n        address[] memory borrowedAssets = comptroller.getAssetsIn(\\n            address(this)\\n        );\\n        IPriceOracle oracle = IPriceOracle(comptroller.oracle());\\n        for (uint256 i = 0; i < borrowedAssets.length; i++) {\\n            IIToken market = IIToken(borrowedAssets[i]);\\n            uint256 amount;\\n            (, , uint256 borrowBalance, ) = market.getAccountSnapshot(\\n                address(this)\\n            );\\n            if (address(market) == borrowMarket) {\\n                amount = borrowBalance + borrowAmount;\\n            } else {\\n                amount = borrowBalance;\\n            }\\n            debt +=\\n                (amount * oracle.getUnderlyingPrice(address(market))) /\\n                1e18;\\n        }\\n        return debt;\\n    }\\n\\n    /**\\n     * @notice Get the hypothetical collateral in USD value in this contract after withdraw\\n     * @param withdrawAmount The hypothetical withdraw amount\\n     * @return The hypothetical collateral in USD value\\n     */\\n    function getHypotheticalCollateralValue(uint256 withdrawAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 balance = getHypotheticalCollateralBalance(withdrawAmount);\\n        uint8 decimals = IERC20Metadata(address(collateral)).decimals();\\n        uint256 normalizedBalance = balance * 10**(18 - decimals);\\n        return (normalizedBalance * priceFeed.getPrice()) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Check if the market is liquidatable\\n     * @param market The market\\n     */\\n    function checkLiquidatable(IIToken market) internal view {\\n        IERC20 underlying = IERC20(market.underlying());\\n        require(\\n            this.debtUSD() > this.liquidationThreshold(),\\n            \\\"not liquidatable\\\"\\n        );\\n        require(address(converters[market]) != address(0), \\\"empty converter\\\");\\n        require(\\n            converters[market].source() == address(collateral),\\n            \\\"mismatch source token\\\"\\n        );\\n        require(\\n            converters[market].destination() == address(underlying),\\n            \\\"mismatch destination token\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Borrow from market\\n     * @param market The market\\n     * @param _amount The borrow amount\\n     */\\n    function borrowInternal(IIToken market, uint256 _amount) internal {\\n        require(\\n            getHypotheticalDebtValue(address(market), _amount) <=\\n                this.collateralUSD(),\\n            \\\"undercollateralized\\\"\\n        );\\n        require(market.borrow(_amount) == 0, \\\"borrow failed\\\");\\n        IERC20(market.underlying()).safeTransfer(borrower, _amount);\\n    }\\n\\n    /**\\n     * @notice Repay the debts\\n     * @param _amount The repay amount\\n     */\\n    function repayInternal(IIToken market, uint256 _amount) internal {\\n        IERC20(market.underlying()).safeIncreaseAllowance(\\n            address(market),\\n            _amount\\n        );\\n        require(market.repayBorrow(_amount) == 0, \\\"repay failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x41b219c1d7c86a08df1cfc458a09f5f3a9d5ae5fb18837f395b9a4701e992c9a\",\"license\":\"MIT\"},\"contracts/IBAgreementFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IBAgreement.sol\\\";\\n\\ncontract IBAgreementFactory is Ownable {\\n    address public immutable comptroller;\\n    address[] public ibAgreements;\\n\\n    event IBAgreementCreated(address ibAgreement);\\n\\n    constructor(address _comptroller) {\\n        comptroller = _comptroller;\\n    }\\n\\n    function create(\\n        address _executor,\\n        address _borrower,\\n        address _governor,\\n        address _collateral,\\n        address _priceFeed,\\n        uint256 _collateralFactor,\\n        uint256 _liquidationFactor,\\n        uint256 _closeFactor,\\n        uint256 _collateralCap\\n    ) external onlyOwner returns (address) {\\n        IBAgreementV3 ibAgreement = new IBAgreementV3(\\n            _executor,\\n            _borrower,\\n            _governor,\\n            comptroller,\\n            _collateral,\\n            _priceFeed,\\n            _collateralFactor,\\n            _liquidationFactor,\\n            _closeFactor,\\n            _collateralCap\\n        );\\n        ibAgreements.push(address(ibAgreement));\\n        emit IBAgreementCreated(address(ibAgreement));\\n        return address(ibAgreement);\\n    }\\n\\n    function count() external view returns (uint256) {\\n        return ibAgreements.length;\\n    }\\n}\\n\",\"keccak256\":\"0xa426d81f00867c3fc35eaec3ec611e107c5290c8203c85939467d8b8d6aa2f5a\",\"license\":\"MIT\"},\"contracts/interfaces/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IComptroller {\\n    function oracle() external view returns (address);\\n\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isMarketListed(address cTokenAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3f3d13a36fd2f11f02d85d07f82ec89df924146913d4b173c50463c4bce46d25\",\"license\":\"MIT\"},\"contracts/interfaces/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IConverter {\\n    function convertExactTokensForTokens(uint256 amountIn, uint256 amountOutMin)\\n        external\\n        returns (uint256);\\n\\n    function convertTokensForExactTokens(uint256 amountOut, uint256 amountInMax)\\n        external\\n        returns (uint256);\\n\\n    function getAmountOut(uint256 amountIn) external returns (uint256);\\n\\n    function getAmountIn(uint256 amountOut) external returns (uint256);\\n\\n    function source() external view returns (address);\\n\\n    function destination() external view returns (address);\\n}\\n\",\"keccak256\":\"0xefbdbec8b1995b6fe4fe752e5f889e670e53d9cfada5aae4d7e995337a775794\",\"license\":\"MIT\"},\"contracts/interfaces/IIToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IIToken {\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function comptroller() external view returns (address);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x76539f74463bf519e771474ac1329185a78ad639710a52db293195a9b076f2af\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFeed {\\n    function getToken() external view returns (address);\\n\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ccc79d885d046a93dad156b1c0ab0721894acb69e9cde9ee5628d1e8c0a13b4\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPriceOracle {\\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe65f738b48a328d7bd31aec4fb7bdeb599f68774315857d44013995e3b1e447e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516139f73803806139f783398101604081905261002f9161009d565b6100383361004d565b60601b6001600160601b0319166080526100cb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ae578081fd5b81516001600160a01b03811681146100c4578182fd5b9392505050565b60805160601c6139086100ef6000396000818160c801526101c601526139086000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ea5780638da5cb5b146100f45780639f1aec6014610105578063f2fde38b146101185761007d565b806306661abd146100825780634281e769146100985780635fe3b567146100c3575b600080fd5b6001546040519081526020015b60405180910390f35b6100ab6100a63660046104be565b61012b565b6040516001600160a01b03909116815260200161008f565b6100ab7f000000000000000000000000000000000000000000000000000000000000000081565b6100f2610155565b005b6000546001600160a01b03166100ab565b6100ab610113366004610435565b610194565b6100f2610126366004610414565b6102ff565b6001818154811061013b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146101885760405162461bcd60e51b815260040161017f906104d6565b60405180910390fd5b610192600061039a565b565b600080546001600160a01b031633146101bf5760405162461bcd60e51b815260040161017f906104d6565b60008a8a8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b8b8b6040516101f7906103ea565b6001600160a01b039a8b168152988a1660208a0152968916604089015294881660608801529287166080870152951660a085015260c084019490945260e083019390935261010082019290925261012081019190915261014001604051809103906000f08015801561026d573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383169081179091556040519081529091507fbf1d3f7d480ac8371bfbfac85c84fdac76519ac5d83d3aa9ed57f6e1ca171fa69060200160405180910390a19a9950505050505050505050565b6000546001600160a01b031633146103295760405162461bcd60e51b815260040161017f906104d6565b6001600160a01b03811661038e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161017f565b6103978161039a565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6133c7806200050c83390190565b80356001600160a01b038116811461040f57600080fd5b919050565b600060208284031215610425578081fd5b61042e826103f8565b9392505050565b60008060008060008060008060006101208a8c031215610453578485fd5b61045c8a6103f8565b985061046a60208b016103f8565b975061047860408b016103f8565b965061048660608b016103f8565b955061049460808b016103f8565b989b979a50959894979660a0860135965060c08601359560e0810135955061010001359350915050565b6000602082840312156104cf578081fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe6101806040523480156200001257600080fd5b50604051620033c7380380620033c783398101604081905262000035916200030a565b600160008190556001600160601b031960608c811b82166080528b811b821660a0528a811b821660c05289811b821660e05288901b1661010052600280546001600160a01b038881166001600160a01b0319909216919091179182905561012087905261014086905261016085905291839055604080516321df0da760e01b8152905191909216916321df0da7916004808301926020929190829003018186803b158015620000e357600080fd5b505afa158015620000f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011e9190620002e6565b6001600160a01b0316866001600160a01b031614620001845760405162461bcd60e51b815260206004820152601360248201527f6d69736d6174636820707269636520666565640000000000000000000000000060448201526064015b60405180910390fd5b6000841180156200019d5750670de0b6b3a76400008411155b620001eb5760405162461bcd60e51b815260206004820152601960248201527f696e76616c696420636f6c6c61746572616c20666163746f720000000000000060448201526064016200017b565b838310158015620002045750670de0b6b3a76400008311155b620002525760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206c69717569646174696f6e20666163746f7200000000000060448201526064016200017b565b6000821180156200026b5750670de0b6b3a76400008211155b620002b95760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420636c6f736520666163746f7200000000000000000000000060448201526064016200017b565b50505050505050505050620003b4565b80516001600160a01b0381168114620002e157600080fd5b919050565b600060208284031215620002f8578081fd5b6200030382620002c9565b9392505050565b6000806000806000806000806000806101408b8d0312156200032a578586fd5b620003358b620002c9565b99506200034560208c01620002c9565b98506200035560408c01620002c9565b97506200036560608c01620002c9565b96506200037560808c01620002c9565b95506200038560a08c01620002c9565b945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c610120516101405161016051612ec562000502600039600081816101c801528181610f9b01526115bb01526000818161027a0152610cf301526000818161041f01528181611139015261145b0152600081816103f80152818161071201528181610c8c01528181610eb20152818161103c0152818161165c015281816117eb01528181611a91015281816122f001526124c80152600081816102e50152818161126401528181611e0c0152611e9001526000818161020201528181610dc9015261172f015260008181610358015281816104a301528181610ac101528181610b4401528181610cae01528181610d5b015281816111a40152611d470152600081816103ad0152818161060701528181610f4a0152818161148b015281816117ac015261187a0152612ec56000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063741bef1a116100f9578063d2bb18e911610097578063d8dfeb4511610071578063d8dfeb45146103f3578063df011c411461041a578063e6d1544014610441578063eb9253c014610454576101a9565b8063d2bb18e9146103cf578063d62429ba146103d8578063d785d039146103e0576101a9565b80638696465e116100d35780638696465e1461037a57806388ba0a14146103825780639bd5c7c514610395578063c34c08e5146103a8576101a9565b8063741bef1a1461032d5780637b3e9904146103405780637df1f1b914610353576101a9565b8063352ade55116101665780634b8a3529116101405780634b8a3529146102cd5780635fe3b567146102e05780636a0e22ac14610307578063724e78da1461031a576101a9565b8063352ade55146102755780634031234c1461029c57806340a05acb146102a4576101a9565b806304949679146101ae57806305308b9f146101c35780630c340a24146101fd57806315b09fee1461023c57806322867d781461024f5780632e1a7d4d14610262575b600080fd5b6101c16101bc3660046128d2565b610467565b005b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f4565b6101c161024a3660046129d0565b6105fc565b6101c161025d366004612a59565b610a8e565b6101c1610270366004612ab8565b610b39565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6101ea610cd6565b6102246102b23660046128d2565b6003602052600090815260409020546001600160a01b031681565b6101c16102db366004612a59565b610d28565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6101ea610315366004612a59565b610dab565b6101c16103283660046128d2565b610dbe565b600254610224906001600160a01b031681565b6101c161034e366004612a84565b610f3f565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6101ea61110b565b6101ea610390366004612ab8565b61111d565b6101c16103a33660046128d2565b611171565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6101ea60015481565b6101ea61143e565b6101c16103ee366004612a84565b611480565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6101c161044f366004612ab8565b611724565b6101c1610462366004612a59565b6117a1565b600260005414156104935760405162461bcd60e51b815260040161048a90612c28565b60405180910390fd5b6002600055336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104e05760405162461bcd60e51b815260040161048a90612b8d565b6040516305eff7ef60e21b81523060048201526000906001600160a01b038316906317bfdfbc90602401602060405180830381600087803b15801561052457600080fd5b505af1158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190612ad0565b90506000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561059957600080fd5b505afa1580156105ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d191906128ee565b90506105e86001600160a01b0382163330856118a3565b6105f2838361190e565b5050600160005550565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106445760405162461bcd60e51b815260040161048a90612bf1565b8281146106855760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b604482015260640161048a565b60005b83811015610a875760008383838181106106b257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106c791906128d2565b6001600160a01b031614156107105760405162461bcd60e51b815260206004820152600f60248201526e32b6b83a3c9031b7b73b32b93a32b960891b604482015260640161048a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683838381811061075a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061076f91906128d2565b6001600160a01b03166367e828bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a757600080fd5b505afa1580156107bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107df91906128ee565b6001600160a01b03161461082d5760405162461bcd60e51b815260206004820152601560248201527436b4b9b6b0ba31b41039b7bab931b2903a37b5b2b760591b604482015260640161048a565b84848281811061084d57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061086291906128d2565b6001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d291906128ee565b6001600160a01b03168383838181106108fb57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061091091906128d2565b6001600160a01b031663b269681d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094857600080fd5b505afa15801561095c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098091906128ee565b6001600160a01b0316146109d65760405162461bcd60e51b815260206004820152601a60248201527f6d69736d617463682064657374696e6174696f6e20746f6b656e000000000000604482015260640161048a565b8282828181106109f657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a0b91906128d2565b60036000878785818110610a2f57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a4491906128d2565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905580610a7f81612e33565b915050610688565b5050505050565b60026000541415610ab15760405162461bcd60e51b815260040161048a90612c28565b6002600055336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610afe5760405162461bcd60e51b815260040161048a90612b8d565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561059957600080fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b815760405162461bcd60e51b815260040161048a90612b8d565b60405163222e828560e21b81526004810182905230906388ba0a149060240160206040518083038186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190612ad0565b306001600160a01b0316638696465e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2957600080fd5b505afa158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c619190612ad0565b1115610c7f5760405162461bcd60e51b815260040161048a90612bc4565b610cd36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611a4a565b50565b600080610ce36000611a7f565b9050670de0b6b3a7640000610d187f000000000000000000000000000000000000000000000000000000000000000083612dae565b610d229190612c77565b91505090565b60026000541415610d4b5760405162461bcd60e51b815260040161048a90612c28565b6002600055336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d985760405162461bcd60e51b815260040161048a90612b8d565b610da28282611bf2565b50506001600055565b6000610db78383611de8565b9392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e365760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f742074686520676f7665726e6f72000000000000604482015260640161048a565b806001600160a01b03166321df0da76040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6f57600080fd5b505afa158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea791906128ee565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610f1d5760405162461bcd60e51b81526020600482015260136024820152721b5a5cdb585d18da081c1c9a58d94819995959606a1b604482015260640161048a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f875760405162461bcd60e51b815260040161048a90612bf1565b610f90836120d2565b670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000610fc460006124a4565b610fce9190612dae565b610fd89190612c77565b82111561101c5760405162461bcd60e51b81526020600482015260126024820152710d8d2e2ead2c8c2e8ca40e8dede40daeac6d60731b604482015260640161048a565b6001600160a01b03808416600090815260036020526040902054611065917f00000000000000000000000000000000000000000000000000000000000000008116911684612573565b6001600160a01b03838116600090815260036020526040808220549051631d5a3f7360e21b8152600481018690526024810185905291921690637568fdcc90604401602060405180830381600087803b1580156110c157600080fd5b505af11580156110d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f99190612ad0565b9050611105848261190e565b50505050565b6000611118600080611de8565b905090565b60008061112983611a7f565b9050670de0b6b3a764000061115e7f000000000000000000000000000000000000000000000000000000000000000083612dae565b6111689190612c77565b9150505b919050565b600260005414156111945760405162461bcd60e51b815260040161048a90612c28565b6002600055336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111e15760405162461bcd60e51b815260040161048a90612b8d565b6040516361bfb47160e11b81523060048201526000906001600160a01b0383169063c37f68e29060240160806040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b9190612ae8565b509250505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156112bb57600080fd5b505afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f391906128ee565b60405163fc57d4df60e01b81526001600160a01b03858116600483015291925060009183169063fc57d4df9060240160206040518083038186803b15801561133a57600080fd5b505afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113729190612ad0565b306001600160a01b031663d62429ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ab57600080fd5b505afa1580156113bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e39190612ad0565b6113f590670de0b6b3a7640000612dae565b6113ff9190612c77565b90508281116114205760405162461bcd60e51b815260040161048a90612bc4565b6114338461142e8584612dcd565b611bf2565b505060016000555050565b60008061144b6000611a7f565b9050670de0b6b3a7640000610d187f000000000000000000000000000000000000000000000000000000000000000083612dae565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114c85760405162461bcd60e51b815260040161048a90612bf1565b6114d1836120d2565b6001600160a01b038381166000908152600360205260408082205490516301369f5560e71b81526004810186905291921690639b4faa8090602401602060405180830381600087803b15801561152657600080fd5b505af115801561153a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155e9190612ad0565b9050818111156115b05760405162461bcd60e51b815260206004820152601a60248201527f746f6f206d75636820636f6c6c61746572616c206e6565646564000000000000604482015260640161048a565b670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006115e460006124a4565b6115ee9190612dae565b6115f89190612c77565b81111561163c5760405162461bcd60e51b81526020600482015260126024820152710d8d2e2ead2c8c2e8ca40e8dede40daeac6d60731b604482015260640161048a565b6001600160a01b03808516600090815260036020526040902054611685917f00000000000000000000000000000000000000000000000000000000000000008116911683612573565b6001600160a01b0384811660009081526003602052604090819020549051635cf1aaf560e11b8152600481018690526024810185905291169063b9e355ea90604401602060405180830381600087803b1580156116e157600080fd5b505af11580156116f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117199190612ad0565b50611105848461190e565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461179c5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f742074686520676f7665726e6f72000000000000604482015260640161048a565b600155565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117e95760405162461bcd60e51b815260040161048a90612bf1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561186b5760405162461bcd60e51b815260206004820152601a60248201527f7365697a6520636f6c6c61746572616c206e6f7420616c6c6f77000000000000604482015260640161048a565b61189f6001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083611a4a565b5050565b6040516001600160a01b03808516602483015283166044820152606481018290526111059085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612634565b6119948282846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561194c57600080fd5b505afa158015611960573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198491906128ee565b6001600160a01b03169190612573565b60405163073a938160e11b8152600481018290526001600160a01b03831690630e75270290602401602060405180830381600087803b1580156119d657600080fd5b505af11580156119ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0e9190612ad0565b1561189f5760405162461bcd60e51b815260206004820152600c60248201526b1c995c185e4819985a5b195960a21b604482015260640161048a565b6040516001600160a01b038316602482015260448101829052611a7a90849063a9059cbb60e01b906064016118d7565b505050565b600080611a8b836124a4565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611ae857600080fd5b505afa158015611afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b209190612b1d565b90506000611b2f826012612de4565b611b3a90600a612cdd565b611b449084612dae565b9050670de0b6b3a7640000600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9d57600080fd5b505afa158015611bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd59190612ad0565b611bdf9083612dae565b611be99190612c77565b95945050505050565b306001600160a01b031663d62429ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2b57600080fd5b505afa158015611c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c639190612ad0565b611c6d8383611de8565b1115611c8b5760405162461bcd60e51b815260040161048a90612bc4565b60405163317afabb60e21b8152600481018290526001600160a01b0383169063c5ebeaec90602401602060405180830381600087803b158015611ccd57600080fd5b505af1158015611ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d059190612ad0565b15611d425760405162461bcd60e51b815260206004820152600d60248201526c189bdc9c9bddc819985a5b1959609a1b604482015260640161048a565b61189f7f000000000000000000000000000000000000000000000000000000000000000082846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611da057600080fd5b505afa158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd891906128ee565b6001600160a01b03169190611a4a565b604051632aff3bff60e21b8152306004820152600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abfceffc9060240160006040518083038186803b158015611e4e57600080fd5b505afa158015611e62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e8a919081019061290a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee757600080fd5b505afa158015611efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1f91906128ee565b905060005b82518110156120c7576000838281518110611f4f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516361bfb47160e11b815230600482015290915060009081906001600160a01b0384169063c37f68e29060240160806040518083038186803b158015611fa157600080fd5b505afa158015611fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd99190612ae8565b5092505050896001600160a01b0316836001600160a01b03161415612009576120028982612c5f565b915061200d565b8091505b60405163fc57d4df60e01b81526001600160a01b038481166004830152670de0b6b3a7640000919087169063fc57d4df9060240160206040518083038186803b15801561205957600080fd5b505afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190612ad0565b61209b9084612dae565b6120a59190612c77565b6120af9088612c5f565b965050505080806120bf90612e33565b915050611f24565b509195945050505050565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561210d57600080fd5b505afa158015612121573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214591906128ee565b9050306001600160a01b0316634031234c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561218057600080fd5b505afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612ad0565b306001600160a01b0316638696465e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f157600080fd5b505afa158015612205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122299190612ad0565b116122695760405162461bcd60e51b815260206004820152601060248201526f6e6f74206c6971756964617461626c6560801b604482015260640161048a565b6001600160a01b03828116600090815260036020526040902054166122c25760405162461bcd60e51b815260206004820152600f60248201526e32b6b83a3c9031b7b73b32b93a32b960891b604482015260640161048a565b6001600160a01b038281166000908152600360209081526040918290205482516367e828bf60e01b815292517f000000000000000000000000000000000000000000000000000000000000000085169491909116926367e828bf926004808301939192829003018186803b15801561233957600080fd5b505afa15801561234d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237191906128ee565b6001600160a01b0316146123bf5760405162461bcd60e51b815260206004820152601560248201527436b4b9b6b0ba31b41039b7bab931b2903a37b5b2b760591b604482015260640161048a565b6001600160a01b0382811660009081526003602090815260409182902054825163b269681d60e01b8152925184861694919091169263b269681d926004808301939192829003018186803b15801561241657600080fd5b505afa15801561242a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244e91906128ee565b6001600160a01b03161461189f5760405162461bcd60e51b815260206004820152601a60248201527f6d69736d617463682064657374696e6174696f6e20746f6b656e000000000000604482015260640161048a565b6040516370a0823160e01b8152306004820152600090819083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561250a57600080fd5b505afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125429190612ad0565b61254c9190612dcd565b905060015460001415801561256357508060015411155b1561256d57506001545b92915050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156125bf57600080fd5b505afa1580156125d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f79190612ad0565b6126019190612c5f565b6040516001600160a01b03851660248201526044810182905290915061110590859063095ea7b360e01b906064016118d7565b6000612689826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127069092919063ffffffff16565b805190915015611a7a57808060200190518101906126a79190612a39565b611a7a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161048a565b6060612715848460008561271d565b949350505050565b60608247101561277e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161048a565b843b6127cc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161048a565b600080866001600160a01b031685876040516127e89190612b3e565b60006040518083038185875af1925050503d8060008114612825576040519150601f19603f3d011682016040523d82523d6000602084013e61282a565b606091505b509150915061283a828286612845565b979650505050505050565b60608315612854575081610db7565b8251156128645782518084602001fd5b8160405162461bcd60e51b815260040161048a9190612b5a565b805161116c81612e7a565b60008083601f84011261289a578182fd5b50813567ffffffffffffffff8111156128b1578182fd5b60208301915083602080830285010111156128cb57600080fd5b9250929050565b6000602082840312156128e3578081fd5b8135610db781612e7a565b6000602082840312156128ff578081fd5b8151610db781612e7a565b6000602080838503121561291c578182fd5b825167ffffffffffffffff80821115612933578384fd5b818501915085601f830112612946578384fd5b81518181111561295857612958612e64565b838102604051601f19603f8301168101818110858211171561297c5761297c612e64565b604052828152858101935084860182860187018a101561299a578788fd5b8795505b838610156129c3576129af8161287e565b85526001959095019493860193860161299e565b5098975050505050505050565b600080600080604085870312156129e5578283fd5b843567ffffffffffffffff808211156129fc578485fd5b612a0888838901612889565b90965094506020870135915080821115612a20578384fd5b50612a2d87828801612889565b95989497509550505050565b600060208284031215612a4a578081fd5b81518015158114610db7578182fd5b60008060408385031215612a6b578182fd5b8235612a7681612e7a565b946020939093013593505050565b600080600060608486031215612a98578283fd5b8335612aa381612e7a565b95602085013595506040909401359392505050565b600060208284031215612ac9578081fd5b5035919050565b600060208284031215612ae1578081fd5b5051919050565b60008060008060808587031215612afd578384fd5b505082516020840151604085015160609095015191969095509092509050565b600060208284031215612b2e578081fd5b815160ff81168114610db7578182fd5b60008251612b50818460208701612e07565b9190910192915050565b6000602082528251806020840152612b79816040850160208701612e07565b601f01601f19169190910160400192915050565b6020808252601a908201527f63616c6c6572206973206e6f742074686520626f72726f776572000000000000604082015260600190565b6020808252601390820152721d5b99195c98dbdb1b185d195c985b1a5e9959606a1b604082015260600190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206578656375746f72000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115612c7257612c72612e4e565b500190565b600082612c9257634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611612ca95750612cd4565b818704821115612cbb57612cbb612e4e565b80861615612cc857918102915b9490941c938002612c9a565b94509492505050565b6000610db760001960ff851684600082612cf957506001610db7565b81612d0657506000610db7565b8160018114612d1c5760028114612d2657612d53565b6001915050610db7565b60ff841115612d3757612d37612e4e565b6001841b915084821115612d4d57612d4d612e4e565b50610db7565b5060208310610133831016604e8410600b8410161715612d86575081810a83811115612d8157612d81612e4e565b610db7565b612d938484846001612c97565b808604821115612da557612da5612e4e565b02949350505050565b6000816000190483118215151615612dc857612dc8612e4e565b500290565b600082821015612ddf57612ddf612e4e565b500390565b600060ff821660ff841680821015612dfe57612dfe612e4e565b90039392505050565b60005b83811015612e22578181015183820152602001612e0a565b838111156111055750506000910152565b6000600019821415612e4757612e47612e4e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610cd357600080fdfea26469706673582212202bfeb9fe91ad75b7a3f1ccf076733cac9788d636c77a1f48bbaf09828e153ed464736f6c63430008020033a2646970667358221220caa10dd39968e6d603323767146e028e98fd5e91ef1e58e82de6ef9717f2883f64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ea5780638da5cb5b146100f45780639f1aec6014610105578063f2fde38b146101185761007d565b806306661abd146100825780634281e769146100985780635fe3b567146100c3575b600080fd5b6001546040519081526020015b60405180910390f35b6100ab6100a63660046104be565b61012b565b6040516001600160a01b03909116815260200161008f565b6100ab7f000000000000000000000000000000000000000000000000000000000000000081565b6100f2610155565b005b6000546001600160a01b03166100ab565b6100ab610113366004610435565b610194565b6100f2610126366004610414565b6102ff565b6001818154811061013b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146101885760405162461bcd60e51b815260040161017f906104d6565b60405180910390fd5b610192600061039a565b565b600080546001600160a01b031633146101bf5760405162461bcd60e51b815260040161017f906104d6565b60008a8a8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b8b8b6040516101f7906103ea565b6001600160a01b039a8b168152988a1660208a0152968916604089015294881660608801529287166080870152951660a085015260c084019490945260e083019390935261010082019290925261012081019190915261014001604051809103906000f08015801561026d573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383169081179091556040519081529091507fbf1d3f7d480ac8371bfbfac85c84fdac76519ac5d83d3aa9ed57f6e1ca171fa69060200160405180910390a19a9950505050505050505050565b6000546001600160a01b031633146103295760405162461bcd60e51b815260040161017f906104d6565b6001600160a01b03811661038e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161017f565b6103978161039a565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6133c7806200050c83390190565b80356001600160a01b038116811461040f57600080fd5b919050565b600060208284031215610425578081fd5b61042e826103f8565b9392505050565b60008060008060008060008060006101208a8c031215610453578485fd5b61045c8a6103f8565b985061046a60208b016103f8565b975061047860408b016103f8565b965061048660608b016103f8565b955061049460808b016103f8565b989b979a50959894979660a0860135965060c08601359560e0810135955061010001359350915050565b6000602082840312156104cf578081fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe6101806040523480156200001257600080fd5b50604051620033c7380380620033c783398101604081905262000035916200030a565b600160008190556001600160601b031960608c811b82166080528b811b821660a0528a811b821660c05289811b821660e05288901b1661010052600280546001600160a01b038881166001600160a01b0319909216919091179182905561012087905261014086905261016085905291839055604080516321df0da760e01b8152905191909216916321df0da7916004808301926020929190829003018186803b158015620000e357600080fd5b505afa158015620000f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011e9190620002e6565b6001600160a01b0316866001600160a01b031614620001845760405162461bcd60e51b815260206004820152601360248201527f6d69736d6174636820707269636520666565640000000000000000000000000060448201526064015b60405180910390fd5b6000841180156200019d5750670de0b6b3a76400008411155b620001eb5760405162461bcd60e51b815260206004820152601960248201527f696e76616c696420636f6c6c61746572616c20666163746f720000000000000060448201526064016200017b565b838310158015620002045750670de0b6b3a76400008311155b620002525760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206c69717569646174696f6e20666163746f7200000000000060448201526064016200017b565b6000821180156200026b5750670de0b6b3a76400008211155b620002b95760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420636c6f736520666163746f7200000000000000000000000060448201526064016200017b565b50505050505050505050620003b4565b80516001600160a01b0381168114620002e157600080fd5b919050565b600060208284031215620002f8578081fd5b6200030382620002c9565b9392505050565b6000806000806000806000806000806101408b8d0312156200032a578586fd5b620003358b620002c9565b99506200034560208c01620002c9565b98506200035560408c01620002c9565b97506200036560608c01620002c9565b96506200037560808c01620002c9565b95506200038560a08c01620002c9565b945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c610120516101405161016051612ec562000502600039600081816101c801528181610f9b01526115bb01526000818161027a0152610cf301526000818161041f01528181611139015261145b0152600081816103f80152818161071201528181610c8c01528181610eb20152818161103c0152818161165c015281816117eb01528181611a91015281816122f001526124c80152600081816102e50152818161126401528181611e0c0152611e9001526000818161020201528181610dc9015261172f015260008181610358015281816104a301528181610ac101528181610b4401528181610cae01528181610d5b015281816111a40152611d470152600081816103ad0152818161060701528181610f4a0152818161148b015281816117ac015261187a0152612ec56000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063741bef1a116100f9578063d2bb18e911610097578063d8dfeb4511610071578063d8dfeb45146103f3578063df011c411461041a578063e6d1544014610441578063eb9253c014610454576101a9565b8063d2bb18e9146103cf578063d62429ba146103d8578063d785d039146103e0576101a9565b80638696465e116100d35780638696465e1461037a57806388ba0a14146103825780639bd5c7c514610395578063c34c08e5146103a8576101a9565b8063741bef1a1461032d5780637b3e9904146103405780637df1f1b914610353576101a9565b8063352ade55116101665780634b8a3529116101405780634b8a3529146102cd5780635fe3b567146102e05780636a0e22ac14610307578063724e78da1461031a576101a9565b8063352ade55146102755780634031234c1461029c57806340a05acb146102a4576101a9565b806304949679146101ae57806305308b9f146101c35780630c340a24146101fd57806315b09fee1461023c57806322867d781461024f5780632e1a7d4d14610262575b600080fd5b6101c16101bc3660046128d2565b610467565b005b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f4565b6101c161024a3660046129d0565b6105fc565b6101c161025d366004612a59565b610a8e565b6101c1610270366004612ab8565b610b39565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6101ea610cd6565b6102246102b23660046128d2565b6003602052600090815260409020546001600160a01b031681565b6101c16102db366004612a59565b610d28565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6101ea610315366004612a59565b610dab565b6101c16103283660046128d2565b610dbe565b600254610224906001600160a01b031681565b6101c161034e366004612a84565b610f3f565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6101ea61110b565b6101ea610390366004612ab8565b61111d565b6101c16103a33660046128d2565b611171565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6101ea60015481565b6101ea61143e565b6101c16103ee366004612a84565b611480565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6101c161044f366004612ab8565b611724565b6101c1610462366004612a59565b6117a1565b600260005414156104935760405162461bcd60e51b815260040161048a90612c28565b60405180910390fd5b6002600055336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104e05760405162461bcd60e51b815260040161048a90612b8d565b6040516305eff7ef60e21b81523060048201526000906001600160a01b038316906317bfdfbc90602401602060405180830381600087803b15801561052457600080fd5b505af1158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190612ad0565b90506000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561059957600080fd5b505afa1580156105ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d191906128ee565b90506105e86001600160a01b0382163330856118a3565b6105f2838361190e565b5050600160005550565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106445760405162461bcd60e51b815260040161048a90612bf1565b8281146106855760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b604482015260640161048a565b60005b83811015610a875760008383838181106106b257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106c791906128d2565b6001600160a01b031614156107105760405162461bcd60e51b815260206004820152600f60248201526e32b6b83a3c9031b7b73b32b93a32b960891b604482015260640161048a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683838381811061075a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061076f91906128d2565b6001600160a01b03166367e828bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a757600080fd5b505afa1580156107bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107df91906128ee565b6001600160a01b03161461082d5760405162461bcd60e51b815260206004820152601560248201527436b4b9b6b0ba31b41039b7bab931b2903a37b5b2b760591b604482015260640161048a565b84848281811061084d57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061086291906128d2565b6001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d291906128ee565b6001600160a01b03168383838181106108fb57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061091091906128d2565b6001600160a01b031663b269681d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094857600080fd5b505afa15801561095c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098091906128ee565b6001600160a01b0316146109d65760405162461bcd60e51b815260206004820152601a60248201527f6d69736d617463682064657374696e6174696f6e20746f6b656e000000000000604482015260640161048a565b8282828181106109f657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a0b91906128d2565b60036000878785818110610a2f57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610a4491906128d2565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905580610a7f81612e33565b915050610688565b5050505050565b60026000541415610ab15760405162461bcd60e51b815260040161048a90612c28565b6002600055336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610afe5760405162461bcd60e51b815260040161048a90612b8d565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561059957600080fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b815760405162461bcd60e51b815260040161048a90612b8d565b60405163222e828560e21b81526004810182905230906388ba0a149060240160206040518083038186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190612ad0565b306001600160a01b0316638696465e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2957600080fd5b505afa158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c619190612ad0565b1115610c7f5760405162461bcd60e51b815260040161048a90612bc4565b610cd36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611a4a565b50565b600080610ce36000611a7f565b9050670de0b6b3a7640000610d187f000000000000000000000000000000000000000000000000000000000000000083612dae565b610d229190612c77565b91505090565b60026000541415610d4b5760405162461bcd60e51b815260040161048a90612c28565b6002600055336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d985760405162461bcd60e51b815260040161048a90612b8d565b610da28282611bf2565b50506001600055565b6000610db78383611de8565b9392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e365760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f742074686520676f7665726e6f72000000000000604482015260640161048a565b806001600160a01b03166321df0da76040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6f57600080fd5b505afa158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea791906128ee565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610f1d5760405162461bcd60e51b81526020600482015260136024820152721b5a5cdb585d18da081c1c9a58d94819995959606a1b604482015260640161048a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f875760405162461bcd60e51b815260040161048a90612bf1565b610f90836120d2565b670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000610fc460006124a4565b610fce9190612dae565b610fd89190612c77565b82111561101c5760405162461bcd60e51b81526020600482015260126024820152710d8d2e2ead2c8c2e8ca40e8dede40daeac6d60731b604482015260640161048a565b6001600160a01b03808416600090815260036020526040902054611065917f00000000000000000000000000000000000000000000000000000000000000008116911684612573565b6001600160a01b03838116600090815260036020526040808220549051631d5a3f7360e21b8152600481018690526024810185905291921690637568fdcc90604401602060405180830381600087803b1580156110c157600080fd5b505af11580156110d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f99190612ad0565b9050611105848261190e565b50505050565b6000611118600080611de8565b905090565b60008061112983611a7f565b9050670de0b6b3a764000061115e7f000000000000000000000000000000000000000000000000000000000000000083612dae565b6111689190612c77565b9150505b919050565b600260005414156111945760405162461bcd60e51b815260040161048a90612c28565b6002600055336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111e15760405162461bcd60e51b815260040161048a90612b8d565b6040516361bfb47160e11b81523060048201526000906001600160a01b0383169063c37f68e29060240160806040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b9190612ae8565b509250505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156112bb57600080fd5b505afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f391906128ee565b60405163fc57d4df60e01b81526001600160a01b03858116600483015291925060009183169063fc57d4df9060240160206040518083038186803b15801561133a57600080fd5b505afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113729190612ad0565b306001600160a01b031663d62429ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ab57600080fd5b505afa1580156113bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e39190612ad0565b6113f590670de0b6b3a7640000612dae565b6113ff9190612c77565b90508281116114205760405162461bcd60e51b815260040161048a90612bc4565b6114338461142e8584612dcd565b611bf2565b505060016000555050565b60008061144b6000611a7f565b9050670de0b6b3a7640000610d187f000000000000000000000000000000000000000000000000000000000000000083612dae565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114c85760405162461bcd60e51b815260040161048a90612bf1565b6114d1836120d2565b6001600160a01b038381166000908152600360205260408082205490516301369f5560e71b81526004810186905291921690639b4faa8090602401602060405180830381600087803b15801561152657600080fd5b505af115801561153a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155e9190612ad0565b9050818111156115b05760405162461bcd60e51b815260206004820152601a60248201527f746f6f206d75636820636f6c6c61746572616c206e6565646564000000000000604482015260640161048a565b670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006115e460006124a4565b6115ee9190612dae565b6115f89190612c77565b81111561163c5760405162461bcd60e51b81526020600482015260126024820152710d8d2e2ead2c8c2e8ca40e8dede40daeac6d60731b604482015260640161048a565b6001600160a01b03808516600090815260036020526040902054611685917f00000000000000000000000000000000000000000000000000000000000000008116911683612573565b6001600160a01b0384811660009081526003602052604090819020549051635cf1aaf560e11b8152600481018690526024810185905291169063b9e355ea90604401602060405180830381600087803b1580156116e157600080fd5b505af11580156116f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117199190612ad0565b50611105848461190e565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461179c5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f742074686520676f7665726e6f72000000000000604482015260640161048a565b600155565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117e95760405162461bcd60e51b815260040161048a90612bf1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561186b5760405162461bcd60e51b815260206004820152601a60248201527f7365697a6520636f6c6c61746572616c206e6f7420616c6c6f77000000000000604482015260640161048a565b61189f6001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083611a4a565b5050565b6040516001600160a01b03808516602483015283166044820152606481018290526111059085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612634565b6119948282846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561194c57600080fd5b505afa158015611960573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198491906128ee565b6001600160a01b03169190612573565b60405163073a938160e11b8152600481018290526001600160a01b03831690630e75270290602401602060405180830381600087803b1580156119d657600080fd5b505af11580156119ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0e9190612ad0565b1561189f5760405162461bcd60e51b815260206004820152600c60248201526b1c995c185e4819985a5b195960a21b604482015260640161048a565b6040516001600160a01b038316602482015260448101829052611a7a90849063a9059cbb60e01b906064016118d7565b505050565b600080611a8b836124a4565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611ae857600080fd5b505afa158015611afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b209190612b1d565b90506000611b2f826012612de4565b611b3a90600a612cdd565b611b449084612dae565b9050670de0b6b3a7640000600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9d57600080fd5b505afa158015611bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd59190612ad0565b611bdf9083612dae565b611be99190612c77565b95945050505050565b306001600160a01b031663d62429ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2b57600080fd5b505afa158015611c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c639190612ad0565b611c6d8383611de8565b1115611c8b5760405162461bcd60e51b815260040161048a90612bc4565b60405163317afabb60e21b8152600481018290526001600160a01b0383169063c5ebeaec90602401602060405180830381600087803b158015611ccd57600080fd5b505af1158015611ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d059190612ad0565b15611d425760405162461bcd60e51b815260206004820152600d60248201526c189bdc9c9bddc819985a5b1959609a1b604482015260640161048a565b61189f7f000000000000000000000000000000000000000000000000000000000000000082846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611da057600080fd5b505afa158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd891906128ee565b6001600160a01b03169190611a4a565b604051632aff3bff60e21b8152306004820152600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abfceffc9060240160006040518083038186803b158015611e4e57600080fd5b505afa158015611e62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e8a919081019061290a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee757600080fd5b505afa158015611efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1f91906128ee565b905060005b82518110156120c7576000838281518110611f4f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516361bfb47160e11b815230600482015290915060009081906001600160a01b0384169063c37f68e29060240160806040518083038186803b158015611fa157600080fd5b505afa158015611fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd99190612ae8565b5092505050896001600160a01b0316836001600160a01b03161415612009576120028982612c5f565b915061200d565b8091505b60405163fc57d4df60e01b81526001600160a01b038481166004830152670de0b6b3a7640000919087169063fc57d4df9060240160206040518083038186803b15801561205957600080fd5b505afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190612ad0565b61209b9084612dae565b6120a59190612c77565b6120af9088612c5f565b965050505080806120bf90612e33565b915050611f24565b509195945050505050565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561210d57600080fd5b505afa158015612121573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214591906128ee565b9050306001600160a01b0316634031234c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561218057600080fd5b505afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612ad0565b306001600160a01b0316638696465e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f157600080fd5b505afa158015612205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122299190612ad0565b116122695760405162461bcd60e51b815260206004820152601060248201526f6e6f74206c6971756964617461626c6560801b604482015260640161048a565b6001600160a01b03828116600090815260036020526040902054166122c25760405162461bcd60e51b815260206004820152600f60248201526e32b6b83a3c9031b7b73b32b93a32b960891b604482015260640161048a565b6001600160a01b038281166000908152600360209081526040918290205482516367e828bf60e01b815292517f000000000000000000000000000000000000000000000000000000000000000085169491909116926367e828bf926004808301939192829003018186803b15801561233957600080fd5b505afa15801561234d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237191906128ee565b6001600160a01b0316146123bf5760405162461bcd60e51b815260206004820152601560248201527436b4b9b6b0ba31b41039b7bab931b2903a37b5b2b760591b604482015260640161048a565b6001600160a01b0382811660009081526003602090815260409182902054825163b269681d60e01b8152925184861694919091169263b269681d926004808301939192829003018186803b15801561241657600080fd5b505afa15801561242a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244e91906128ee565b6001600160a01b03161461189f5760405162461bcd60e51b815260206004820152601a60248201527f6d69736d617463682064657374696e6174696f6e20746f6b656e000000000000604482015260640161048a565b6040516370a0823160e01b8152306004820152600090819083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561250a57600080fd5b505afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125429190612ad0565b61254c9190612dcd565b905060015460001415801561256357508060015411155b1561256d57506001545b92915050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156125bf57600080fd5b505afa1580156125d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f79190612ad0565b6126019190612c5f565b6040516001600160a01b03851660248201526044810182905290915061110590859063095ea7b360e01b906064016118d7565b6000612689826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127069092919063ffffffff16565b805190915015611a7a57808060200190518101906126a79190612a39565b611a7a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161048a565b6060612715848460008561271d565b949350505050565b60608247101561277e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161048a565b843b6127cc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161048a565b600080866001600160a01b031685876040516127e89190612b3e565b60006040518083038185875af1925050503d8060008114612825576040519150601f19603f3d011682016040523d82523d6000602084013e61282a565b606091505b509150915061283a828286612845565b979650505050505050565b60608315612854575081610db7565b8251156128645782518084602001fd5b8160405162461bcd60e51b815260040161048a9190612b5a565b805161116c81612e7a565b60008083601f84011261289a578182fd5b50813567ffffffffffffffff8111156128b1578182fd5b60208301915083602080830285010111156128cb57600080fd5b9250929050565b6000602082840312156128e3578081fd5b8135610db781612e7a565b6000602082840312156128ff578081fd5b8151610db781612e7a565b6000602080838503121561291c578182fd5b825167ffffffffffffffff80821115612933578384fd5b818501915085601f830112612946578384fd5b81518181111561295857612958612e64565b838102604051601f19603f8301168101818110858211171561297c5761297c612e64565b604052828152858101935084860182860187018a101561299a578788fd5b8795505b838610156129c3576129af8161287e565b85526001959095019493860193860161299e565b5098975050505050505050565b600080600080604085870312156129e5578283fd5b843567ffffffffffffffff808211156129fc578485fd5b612a0888838901612889565b90965094506020870135915080821115612a20578384fd5b50612a2d87828801612889565b95989497509550505050565b600060208284031215612a4a578081fd5b81518015158114610db7578182fd5b60008060408385031215612a6b578182fd5b8235612a7681612e7a565b946020939093013593505050565b600080600060608486031215612a98578283fd5b8335612aa381612e7a565b95602085013595506040909401359392505050565b600060208284031215612ac9578081fd5b5035919050565b600060208284031215612ae1578081fd5b5051919050565b60008060008060808587031215612afd578384fd5b505082516020840151604085015160609095015191969095509092509050565b600060208284031215612b2e578081fd5b815160ff81168114610db7578182fd5b60008251612b50818460208701612e07565b9190910192915050565b6000602082528251806020840152612b79816040850160208701612e07565b601f01601f19169190910160400192915050565b6020808252601a908201527f63616c6c6572206973206e6f742074686520626f72726f776572000000000000604082015260600190565b6020808252601390820152721d5b99195c98dbdb1b185d195c985b1a5e9959606a1b604082015260600190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206578656375746f72000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115612c7257612c72612e4e565b500190565b600082612c9257634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611612ca95750612cd4565b818704821115612cbb57612cbb612e4e565b80861615612cc857918102915b9490941c938002612c9a565b94509492505050565b6000610db760001960ff851684600082612cf957506001610db7565b81612d0657506000610db7565b8160018114612d1c5760028114612d2657612d53565b6001915050610db7565b60ff841115612d3757612d37612e4e565b6001841b915084821115612d4d57612d4d612e4e565b50610db7565b5060208310610133831016604e8410600b8410161715612d86575081810a83811115612d8157612d81612e4e565b610db7565b612d938484846001612c97565b808604821115612da557612da5612e4e565b02949350505050565b6000816000190483118215151615612dc857612dc8612e4e565b500290565b600082821015612ddf57612ddf612e4e565b500390565b600060ff821660ff841680821015612dfe57612dfe612e4e565b90039392505050565b60005b83811015612e22578181015183820152602001612e0a565b838111156111055750506000910152565b6000600019821415612e4757612e47612e4e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610cd357600080fdfea26469706673582212202bfeb9fe91ad75b7a3f1ccf076733cac9788d636c77a1f48bbaf09828e153ed464736f6c63430008020033a2646970667358221220caa10dd39968e6d603323767146e028e98fd5e91ef1e58e82de6ef9717f2883f64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 490,
        "contract": "contracts/IBAgreementFactory.sol:IBAgreementFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3434,
        "contract": "contracts/IBAgreementFactory.sol:IBAgreementFactory",
        "label": "ibAgreements",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}